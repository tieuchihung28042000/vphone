#!/bin/bash

# Script setup MongoDB native
# S·ª≠ d·ª•ng: ./scripts/setup-mongodb.sh [database_name]
# V√≠ d·ª•: ./scripts/setup-mongodb.sh vphone_production

set -e

# L·∫•y t√™n database t·ª´ tham s·ªë ho·∫∑c d√πng m·∫∑c ƒë·ªãnh
DATABASE_NAME=${1:-vphone_production}

# Ki·ªÉm tra t√™n database h·ª£p l·ªá (kh√¥ng ch·ª©a d·∫•u ch·∫•m, kho·∫£ng tr·∫Øng, k√Ω t·ª± ƒë·∫∑c bi·ªát)
if [[ "$DATABASE_NAME" =~ [^a-zA-Z0-9_] ]]; then
    echo "‚ùå T√™n database kh√¥ng h·ª£p l·ªá: $DATABASE_NAME"
    echo "üìù T√™n database ch·ªâ ƒë∆∞·ª£c ch·ª©a: a-z, A-Z, 0-9, _"
    echo "üí° G·ª£i √Ω: S·ª≠ d·ª•ng 'vphone_production' thay v√¨ '$DATABASE_NAME'"
    DATABASE_NAME="vphone_production"
    echo "üîÑ S·ª≠ d·ª•ng t√™n database m·∫∑c ƒë·ªãnh: $DATABASE_NAME"
fi

echo "üöÄ Setup MongoDB native v·ªõi database: $DATABASE_NAME"

# Ki·ªÉm tra MongoDB ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t ch∆∞a
if command -v mongod &> /dev/null; then
    echo "‚úÖ MongoDB ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"
    
    # Ki·ªÉm tra service ƒëang ch·∫°y ch∆∞a
    if sudo systemctl is-active --quiet mongod; then
        echo "‚úÖ MongoDB service ƒëang ch·∫°y"
        
        # Ki·ªÉm tra c√≥ th·ªÉ k·∫øt n·ªëi kh√¥ng
        if mongosh --eval "db.adminCommand('ping')" --quiet 2>/dev/null; then
            echo "‚úÖ MongoDB ƒë√£ s·∫µn s√†ng, b·ªè qua c√†i ƒë·∫∑t"
            SKIP_INSTALL=true
        else
            echo "‚ö†Ô∏è  MongoDB ƒëang ch·∫°y nh∆∞ng kh√¥ng th·ªÉ k·∫øt n·ªëi"
            SKIP_INSTALL=false
        fi
    else
        echo "‚ö†Ô∏è  MongoDB ƒë√£ c√†i ƒë·∫∑t nh∆∞ng service kh√¥ng ch·∫°y"
        SKIP_INSTALL=false
    fi
else
    echo "üì¶ MongoDB ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t"
    SKIP_INSTALL=false
fi

# Ki·ªÉm tra h·ªá ƒëi·ªÅu h√†nh v√† c√†i ƒë·∫∑t MongoDB
if [ "$SKIP_INSTALL" != "true" ]; then
if [[ "$OSTYPE" == "darwin"* ]]; then
    # macOS
    echo "üì± C√†i ƒë·∫∑t MongoDB tr√™n macOS..."
    if ! command -v mongod &> /dev/null; then
        if ! command -v brew &> /dev/null; then
            echo "‚ùå C·∫ßn Homebrew ƒë·ªÉ c√†i ƒë·∫∑t MongoDB"
            echo "Ch·∫°y: /bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
            exit 1
        fi
        brew tap mongodb/brew
        brew install mongodb-community
    fi
    
    # T·∫°o th∆∞ m·ª•c v√† kh·ªüi ƒë·ªông
    mkdir -p /usr/local/var/mongodb
    mkdir -p /usr/local/var/log/mongodb
    
    # Kh·ªüi ƒë·ªông MongoDB
    if ! pgrep -f mongod > /dev/null; then
        mongod --dbpath /usr/local/var/mongodb --logpath /usr/local/var/log/mongodb/mongo.log --fork
        sleep 3
    fi
    
elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    # Linux
    echo "üêß C√†i ƒë·∫∑t MongoDB tr√™n Linux..."
    if ! command -v mongod &> /dev/null; then
        # S·ª≠a l·ªói repository tr∆∞·ªõc khi c√†i ƒë·∫∑t
        echo "üîß S·ª≠a l·ªói repository..."
        sudo rm -f /etc/apt/sources.list.d/cloudflare.list 2>/dev/null || true
        
        curl -fsSL https://www.mongodb.org/static/pgp/server-7.0.asc | sudo gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg --dearmor
        echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
        sudo apt-get update
        sudo apt-get install -y mongodb-org
    fi
    
    # Kh·ªüi ƒë·ªông MongoDB
    echo "üîß C·∫•u h√¨nh MongoDB..."
    # T·∫°o th∆∞ m·ª•c c·∫ßn thi·∫øt
    sudo mkdir -p /var/lib/mongodb
    sudo mkdir -p /var/log/mongodb
    sudo chown -R mongodb:mongodb /var/lib/mongodb
    sudo chown -R mongodb:mongodb /var/log/mongodb
    
    # Ki·ªÉm tra file c·∫•u h√¨nh
    if [ ! -f /etc/mongod.conf ]; then
        echo "‚ö†Ô∏è  File c·∫•u h√¨nh MongoDB kh√¥ng t·ªìn t·∫°i, t·∫°o m·ªõi..."
        sudo tee /etc/mongod.conf > /dev/null << 'EOF'
# MongoDB configuration file
storage:
  dbPath: /var/lib/mongodb
  journal:
    enabled: true

systemLog:
  destination: file
  logAppend: true
  path: /var/log/mongodb/mongod.log

net:
  port: 27017
  bindIp: 127.0.0.1

processManagement:
  fork: true
  pidFilePath: /var/run/mongodb/mongod.pid
  timeZoneInfo: /usr/share/zoneinfo
EOF
    fi
    
    # Kh·ªüi ƒë·ªông MongoDB
    sudo systemctl start mongod
    sudo systemctl enable mongod
    sleep 5
    
    # Ki·ªÉm tra tr·∫°ng th√°i
    if ! sudo systemctl is-active --quiet mongod; then
        echo "‚ùå MongoDB service failed, ki·ªÉm tra logs..."
        sudo journalctl -u mongod --no-pager --lines=10
        echo "üîÑ Th·ª≠ kh·ªüi ƒë·ªông l·∫°i..."
        sudo systemctl restart mongod
        sleep 3
        
        if ! sudo systemctl is-active --quiet mongod; then
            echo "‚ùå Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông MongoDB service"
            exit 1
        fi
    fi
else
    echo "‚ùå H·ªá ƒëi·ªÅu h√†nh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£"
    exit 1
fi
fi  # K·∫øt th√∫c block SKIP_INSTALL

# Ki·ªÉm tra MongoDB c√≥ authentication ch∆∞a
echo "üîç Ki·ªÉm tra tr·∫°ng th√°i authentication..."
AUTH_STATUS=$(mongosh --eval "db.adminCommand('connectionStatus')" --quiet 2>/dev/null | grep -c "authenticated" || echo "0")

if [ "$AUTH_STATUS" -eq 0 ]; then
    # MongoDB ch∆∞a c√≥ authentication, t·∫°o admin user
    echo "üë§ T·∫°o admin user (MongoDB ch∆∞a c√≥ authentication)..."
    mongosh --eval "
    use admin
    try {
      db.createUser({
        user: 'admin',
        pwd: '12345',
        roles: [
          { role: 'userAdminAnyDatabase', db: 'admin' },
          { role: 'readWriteAnyDatabase', db: 'admin' },
          { role: 'dbAdminAnyDatabase', db: 'admin' }
        ]
      })
      print('‚úÖ Admin user ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng')
    } catch(e) {
      print('‚ö†Ô∏è  Admin user c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i: ' + e.message)
    }
    " --quiet
    
    # Restart MongoDB ƒë·ªÉ b·∫≠t authentication
    echo "üîÑ Restart MongoDB ƒë·ªÉ b·∫≠t authentication..."
    sudo systemctl restart mongod
    sleep 3
else
    echo "‚úÖ MongoDB ƒë√£ c√≥ authentication"
fi

# T·∫°o database v√† user
echo "üóÑÔ∏è  T·∫°o database $DATABASE_NAME..."
# Th·ª≠ k·∫øt n·ªëi v·ªõi admin user
if mongosh -u admin -p 12345 --authenticationDatabase admin --eval "db.adminCommand('ping')" --quiet 2>/dev/null; then
    echo "‚úÖ K·∫øt n·ªëi v·ªõi admin user th√†nh c√¥ng"
    mongosh -u admin -p 12345 --authenticationDatabase admin --eval "
    use $DATABASE_NAME
    try {
      db.createCollection('_init')
      print('‚úÖ Database $DATABASE_NAME ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng')
    } catch(e) {
      print('‚ö†Ô∏è  Database c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i: ' + e.message)
    }
    " --quiet
else
    # Th·ª≠ k·∫øt n·ªëi kh√¥ng c√≥ authentication
    echo "‚ö†Ô∏è  Th·ª≠ k·∫øt n·ªëi kh√¥ng c√≥ authentication..."
    mongosh --eval "
    use $DATABASE_NAME
    try {
      db.createCollection('_init')
      print('‚úÖ Database $DATABASE_NAME ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng')
    } catch(e) {
      print('‚ùå L·ªói t·∫°o database: ' + e.message)
    }
    " --quiet
fi

# Ki·ªÉm tra k·∫øt n·ªëi
echo "üîç Ki·ªÉm tra k·∫øt n·ªëi..."
if mongosh -u admin -p 12345 --authenticationDatabase admin --eval "db.adminCommand('ping')" --quiet; then
    echo "‚úÖ MongoDB ƒë√£ s·∫µn s√†ng!"
    
    # Ki·ªÉm tra chi ti·∫øt database
    echo "üìä Ki·ªÉm tra database $DATABASE_NAME..."
    mongosh -u admin -p 12345 --authenticationDatabase admin --eval "
    use $DATABASE_NAME
    print('üìã Collections trong database:')
    db.getCollectionNames().forEach(function(collection) {
        var count = db.getCollection(collection).countDocuments()
        print('  - ' + collection + ': ' + count + ' documents')
    })
    
    print('\\nüìà Th·ªëng k√™ database:')
    var stats = db.stats()
    print('  - T·ªïng collections: ' + stats.collections)
    print('  - T·ªïng documents: ' + stats.objects)
    print('  - K√≠ch th∆∞·ªõc data: ' + (stats.dataSize / 1024 / 1024).toFixed(2) + ' MB')
    print('  - K√≠ch th∆∞·ªõc storage: ' + (stats.storageSize / 1024 / 1024).toFixed(2) + ' MB')
    " --quiet
    
    echo ""
    echo "üìä Th√¥ng tin k·∫øt n·ªëi:"
    echo "   - Host: localhost:27017"
    echo "   - Admin User: admin"
    echo "   - Admin Password: 12345"
    echo "   - Database: $DATABASE_NAME"
    echo "   - Connection String: mongodb://admin:12345@localhost:27017/$DATABASE_NAME?authSource=admin"
else
    echo "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi MongoDB"
    exit 1
fi 