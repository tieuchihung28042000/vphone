#!/bin/bash

# VPhone Update and Deploy Script
# S·ª≠ d·ª•ng: ./scripts/update-and-deploy.sh "commit message"
# Ho·∫∑c: ./scripts/update-and-deploy.sh (s·∫Ω d√πng commit message m·∫∑c ƒë·ªãnh)

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${PURPLE}$1${NC}"
}

# Get commit message from parameter or use default
get_commit_message() {
    if [ -n "$1" ]; then
        echo "$1"
    else
        echo "Fix: C·∫≠p nh·∫≠t v√† s·ª≠a l·ªói h·ªá th·ªëng - $(date '+%Y-%m-%d %H:%M:%S')"
    fi
}

# Show current status
show_git_status() {
    print_header "üìã TR·∫†NG TH√ÅI HI·ªÜN T·∫†I:"
    echo ""
    
    # Check if we're in a git repository
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        print_error "Kh√¥ng ph·∫£i l√† Git repository!"
        exit 1
    fi
    
    # Show current branch
    CURRENT_BRANCH=$(git branch --show-current)
    print_status "Nh√°nh hi·ªán t·∫°i: $CURRENT_BRANCH"
    
    # Show uncommitted changes
    if ! git diff --quiet || ! git diff --cached --quiet; then
        print_warning "C√≥ thay ƒë·ªïi ch∆∞a commit:"
        git status --porcelain
    else
        print_success "Kh√¥ng c√≥ thay ƒë·ªïi ch∆∞a commit"
    fi
    
    # Show untracked files
    UNTRACKED=$(git ls-files --others --exclude-standard)
    if [ -n "$UNTRACKED" ]; then
        print_warning "C√≥ file ch∆∞a ƒë∆∞·ª£c track:"
        echo "$UNTRACKED"
    fi
    
    echo ""
}

# Cleanup unnecessary files
cleanup_files() {
    print_status "D·ªçn d·∫πp file kh√¥ng c·∫ßn thi·∫øt..."
    
    # Remove commonly unwanted files
    find . -name ".DS_Store" -delete 2>/dev/null || true
    find . -name "*.log" -delete 2>/dev/null || true
    find . -name "node_modules" -type d -prune -exec rm -rf {} + 2>/dev/null || true
    find . -name "dist" -type d -prune -exec rm -rf {} + 2>/dev/null || true
    
    # Remove backup files
    find . -name "*.backup" -delete 2>/dev/null || true
    find . -name "*~" -delete 2>/dev/null || true
    
    print_success "D·ªçn d·∫πp ho√†n t·∫•t"
}

# Add and commit changes
commit_changes() {
    local commit_message="$1"
    
    print_header "üìù COMMIT THAY ƒê·ªîI:"
    echo ""
    
    print_status "Commit message: $commit_message"
    
    # Add all changes (including untracked files)
    print_status "Th√™m t·∫•t c·∫£ thay ƒë·ªïi..."
    git add .
    
    # Show what will be committed
    if git diff --cached --quiet; then
        print_warning "Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë·ªÉ commit"
        return 0
    fi
    
    print_status "C√°c file s·∫Ω ƒë∆∞·ª£c commit:"
    git diff --cached --name-only | while read file; do
        echo "  + $file"
    done
    
    # Commit changes
    print_status "ƒêang commit..."
    git commit -m "$commit_message"
    
    print_success "Commit th√†nh c√¥ng!"
    echo ""
}

# Push to remote
push_to_remote() {
    print_header "üöÄ PUSH L√äN GIT REPOSITORY:"
    echo ""
    
    local current_branch=$(git branch --show-current)
    
    print_status "ƒêang push nh√°nh '$current_branch' l√™n origin..."
    
    # Push with upstream tracking
    if git push -u origin "$current_branch"; then
        print_success "Push th√†nh c√¥ng!"
    else
        print_error "Push th·∫•t b·∫°i!"
        return 1
    fi
    
    echo ""
}

# Deploy to VPS
deploy_to_vps() {
    print_header "üèóÔ∏è  DEPLOY L√äN VPS:"
    echo ""
    
    # Check if deploy script exists
    if [ ! -f "scripts/deploy-vps.sh" ]; then
        print_error "Kh√¥ng t√¨m th·∫•y script deploy-vps.sh!"
        return 1
    fi
    
    print_status "Ch·∫°y script deploy..."
    
    # Make deploy script executable
    chmod +x scripts/deploy-vps.sh
    
    # Run deploy script
    if scripts/deploy-vps.sh; then
        print_success "Deploy th√†nh c√¥ng!"
    else
        print_error "Deploy th·∫•t b·∫°i!"
        return 1
    fi
    
    echo ""
}

# Show summary
show_summary() {
    print_header "üéâ HO√ÄN TH√ÄNH C·∫¨P NH·∫¨T V√Ä DEPLOY!"
    echo ""
    echo "=================================="
    echo "‚úÖ Summary:"
    echo "  ‚Ä¢ Code ƒë√£ ƒë∆∞·ª£c commit v√† push"
    echo "  ‚Ä¢ VPS ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t"
    echo "  ‚Ä¢ Services ƒë√£ ƒë∆∞·ª£c restart"
    echo "  ‚Ä¢ Tests ƒë√£ pass"
    echo ""
    echo "üîç Ki·ªÉm tra:"
    echo "  ‚Ä¢ Website: http://your-domain.com"
    echo "  ‚Ä¢ Backend API: http://your-domain.com/api/branches"
    echo ""
    echo "üìä Monitoring:"
    echo "  ‚Ä¢ pm2 status"
    echo "  ‚Ä¢ pm2 logs --follow"
    echo "  ‚Ä¢ systemctl status nginx"
    echo ""
    echo "‚è∞ Th·ªùi gian ho√†n th√†nh: $(date)"
    echo "=================================="
    echo ""
}

# Confirmation prompt
confirm_action() {
    echo ""
    print_warning "‚ö†Ô∏è  B·∫†N S·∫ÆP TH·ª∞C HI·ªÜN C·∫¨P NH·∫¨T V√Ä DEPLOY!"
    echo ""
    echo "C√°c b∆∞·ªõc s·∫Ω ƒë∆∞·ª£c th·ª±c hi·ªán:"
    echo "1. D·ªçn d·∫πp file kh√¥ng c·∫ßn thi·∫øt"
    echo "2. Add v√† commit t·∫•t c·∫£ thay ƒë·ªïi"
    echo "3. Push l√™n Git repository"
    echo "4. Deploy l√™n VPS"
    echo "5. Restart services v√† test"
    echo ""
    
    read -p "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c? (y/N): " -n 1 -r
    echo ""
    
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_warning "H·ªßy b·ªè thao t√°c"
        exit 0
    fi
    echo ""
}

# Error handling
handle_error() {
    print_error "C√≥ l·ªói x·∫£y ra t·∫°i d√≤ng $1"
    echo ""
    print_warning "C√°c b∆∞·ªõc ƒë√£ th·ª±c hi·ªán c√≥ th·ªÉ c·∫ßn ƒë∆∞·ª£c rollback th·ªß c√¥ng"
    echo ""
    exit 1
}

# Main function
main() {
    # Set error handler
    trap 'handle_error $LINENO' ERR
    
    print_header "üöÄ VPHONE UPDATE AND DEPLOY SCRIPT"
    echo ""
    echo "Timestamp: $(date)"
    echo ""
    
    # Get commit message
    local commit_message=$(get_commit_message "$1")
    
    # Show current status
    show_git_status
    
    # Ask for confirmation
    confirm_action
    
    # Execute steps
    cleanup_files
    commit_changes "$commit_message"
    push_to_remote
    deploy_to_vps
    
    # Show summary
    show_summary
}

# Help function
show_help() {
    echo "VPhone Update and Deploy Script"
    echo ""
    echo "S·ª≠ d·ª•ng:"
    echo "  $0                          # S·ª≠ d·ª•ng commit message m·∫∑c ƒë·ªãnh"
    echo "  $0 \"message\"                # S·ª≠ d·ª•ng commit message t√πy ch·ªânh"
    echo "  $0 --help                   # Hi·ªÉn th·ªã help"
    echo ""
    echo "V√≠ d·ª•:"
    echo "  $0 \"Fix: S·ª≠a l·ªói ƒëƒÉng nh·∫≠p\""
    echo "  $0 \"Feature: Th√™m ch·ª©c nƒÉng b√°o c√°o\""
    echo ""
}

# Check parameters
if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    show_help
    exit 0
fi

# Run main function
main "$1" 