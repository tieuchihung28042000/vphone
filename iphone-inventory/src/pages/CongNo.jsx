import { useEffect, useState } from "react";
import Layout from "../components/Layout";
import StatsCard from "../components/StatsCard";
import FormCard from "../components/FormCard";
import FilterCard from "../components/FilterCard";
import DataTable from "../components/DataTable";

// Utility functions
function formatNumber(val) {
  if (val === undefined || val === null || val === "") return "";
  return val.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ");
}

function formatCurrency(amount) {
  if (!amount || amount === 0) return "0ƒë";
  
  if (amount >= 1000000000) {
    return `${(amount / 1000000000).toFixed(1)}T·ª∑`;
  } else if (amount >= 1000000) {
    return `${(amount / 1000000).toFixed(1)}Tr`;
  } else if (amount >= 1000) {
    return `${(amount / 1000).toFixed(0)}K`;
  }
  return `${formatNumber(amount)}ƒë`;
}

function CongNo() {
  // Tab state - c√≥ 2 tab: khach_no (kh√°ch n·ª£ m√¨nh) v√† minh_no_ncc (m√¨nh n·ª£ nh√† cung c·∫•p)
  const [activeTab, setActiveTab] = useState("khach_no");
  
  const [debts, setDebts] = useState([]);
  const [supplierDebts, setSupplierDebts] = useState([]);
  const [selectedCustomer, setSelectedCustomer] = useState(null);
  const [selectedSupplier, setSelectedSupplier] = useState(null);
  
  // ‚úÖ Th√™m loading states
  const [loading, setLoading] = useState(false);
  const [supplierLoading, setSupplierLoading] = useState(false);
  const [customerDebt, setCustomerDebt] = useState({ total_debt: 0, total_paid: 0, debt_history: [] });
  const [supplierDebt, setSupplierDebt] = useState({ total_debt: 0, total_paid: 0, debt_history: [] });
  const [payAmount, setPayAmount] = useState("");
  const [payNote, setPayNote] = useState("");
  const [addAmount, setAddAmount] = useState("");
  const [addNote, setAddNote] = useState("");
  const [historyModal, setHistoryModal] = useState({ open: false, history: [] });
  const [detailModal, setDetailModal] = useState({ open: false, orders: [] });
  
  // Filter states
  const [searchText, setSearchText] = useState("");
  const [showAll, setShowAll] = useState(false);
  const [editModal, setEditModal] = useState({ open: false, customer: null });
  const [editForm, setEditForm] = useState({ name: "", phone: "" });

  // Stats calculation - t√°ch ri√™ng cho 2 tab
  const customerStats = {
    totalDebt: debts.reduce((sum, debt) => sum + debt.total_debt, 0),
    totalCustomers: debts.length,
    largestDebt: Math.max(...debts.map(debt => debt.total_debt), 0),
    averageDebt: debts.length > 0 ? debts.reduce((sum, debt) => sum + debt.total_debt, 0) / debts.length : 0
  };

  const supplierStats = {
    totalDebt: supplierDebts.reduce((sum, debt) => sum + debt.total_debt, 0),
    totalCustomers: supplierDebts.length, // ‚úÖ Changed from totalSuppliers to totalCustomers for consistency
    largestDebt: Math.max(...supplierDebts.map(debt => debt.total_debt), 0),
    averageDebt: supplierDebts.length > 0 ? supplierDebts.reduce((sum, debt) => sum + debt.total_debt, 0) / supplierDebts.length : 0
  };

  const stats = activeTab === "khach_no" ? customerStats : supplierStats;

  // API functions
  const fetchDebts = async () => {
    try {
      setLoading(true);
      const params = new URLSearchParams();
      if (searchText.trim()) params.append('search', searchText.trim());
      if (showAll) params.append('show_all', 'true');
      
      const res = await fetch(`${import.meta.env.VITE_API_URL}/api/cong-no/cong-no-list?${params}`);
      const data = await res.json();
      setDebts(data.items || []);
    } catch (err) {
      console.error('‚ùå Error fetching customer debts:', err);
      setDebts([]);
    } finally {
      setLoading(false);
    }
  };

  const fetchSupplierDebts = async () => {
    const params = new URLSearchParams();
    if (searchText.trim()) params.append('search', searchText.trim());
    if (showAll) params.append('show_all', 'true');
    
    try {
      setSupplierLoading(true);
      console.log('üîç Fetching supplier debts...'); // Debug
      const res = await fetch(`${import.meta.env.VITE_API_URL}/api/cong-no/supplier-debt-list?${params}`);
      
      if (!res.ok) {
        throw new Error(`HTTP ${res.status}: ${res.statusText}`);
      }
      
      const data = await res.json();
      console.log('üì¶ Supplier debts response:', data); // Debug
      
      // ‚úÖ API tr·∫£ v·ªÅ data.suppliers ch·ª© kh√¥ng ph·∫£i data.items
      setSupplierDebts(data.suppliers || data.items || []);
    } catch (err) {
      console.error('‚ùå Error fetching supplier debts:', err);
      setSupplierDebts([]);
      // Hi·ªÉn th·ªã error message thay v√¨ white screen
      alert(`‚ùå L·ªói t·∫£i d·ªØ li·ªáu nh√† cung c·∫•p: ${err.message}`);
    } finally {
      setSupplierLoading(false);
    }
  };

  const handleSelectCustomer = (customer) => {
    setSelectedCustomer(customer);
    setCustomerDebt({
      total_debt: customer.total_debt || 0,
      total_paid: customer.total_paid || 0,
      debt_history: customer.debt_history || []
    });
    setPayAmount(""); 
    setPayNote("");
    setAddAmount(""); 
    setAddNote("");
  };

  // Supplier handler functions
  const handleSelectSupplier = (supplier) => {
    setSelectedSupplier(supplier);
    setSupplierDebt({
      total_debt: supplier.total_debt || 0,
      total_paid: supplier.total_paid || 0,
      debt_history: supplier.debt_history || []
    });
    setPayAmount(""); 
    setPayNote("");
    setAddAmount(""); 
    setAddNote("");
  };

  const handleShowSupplierDetail = async (supplier) => {
    const res = await fetch(
      `${import.meta.env.VITE_API_URL}/api/cong-no/supplier-orders?supplier_name=${encodeURIComponent(supplier.supplier_name)}`
    );
    const data = await res.json();
    setDetailModal({ open: true, orders: data.orders || [] });
  };

  const handlePaySupplierDebt = async () => {
    if (!payAmount || isNaN(payAmount)) return alert("Nh·∫≠p s·ªë ti·ªÅn mu·ªën tr·∫£");
    const res = await fetch(`${import.meta.env.VITE_API_URL}/api/cong-no/supplier-debt-pay`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        supplier_name: selectedSupplier.supplier_name,
        amount: payAmount,
        note: payNote
      }),
    });
    const data = await res.json();
    if (res.ok) {
      alert("‚úÖ ƒê√£ tr·∫£ n·ª£ nh√† cung c·∫•p!");
      setPayAmount(""); 
      setPayNote("");
      await fetchSupplierDebts();
      // Update selected supplier debt info
      setTimeout(() => {
        const updated = supplierDebts.find(d => d.supplier_name === selectedSupplier.supplier_name);
        if (updated) {
          setSupplierDebt({
            total_debt: updated.total_debt,
            total_paid: updated.total_paid,
            debt_history: updated.debt_history || []
          });
        }
      }, 200);
    } else {
      alert("‚ùå " + (data.message || "Tr·∫£ n·ª£ NCC th·∫•t b·∫°i!"));
    }
  };

  const handleAddSupplierDebt = async () => {
    if (!addAmount || isNaN(addAmount)) return alert("Nh·∫≠p s·ªë ti·ªÅn mu·ªën c·ªông n·ª£");
    const res = await fetch(`${import.meta.env.VITE_API_URL}/api/cong-no/supplier-debt-add`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        supplier_name: selectedSupplier.supplier_name,
        amount: addAmount,
        note: addNote
      }),
    });
    const data = await res.json();
    if (res.ok) {
      alert("‚úÖ ƒê√£ c·ªông th√™m n·ª£ NCC!");
      setAddAmount(""); 
      setAddNote("");
      await fetchSupplierDebts();
      // Update selected supplier debt info
      setTimeout(() => {
        const updated = supplierDebts.find(d => d.supplier_name === selectedSupplier.supplier_name);
        if (updated) {
          setSupplierDebt({
            total_debt: updated.total_debt,
            total_paid: updated.total_paid,
            debt_history: updated.debt_history || []
          });
        }
      }, 200);
    } else {
      alert("‚ùå " + (data.message || "C·ªông n·ª£ NCC th·∫•t b·∫°i!"));
    }
  };

  const handlePayDebt = async () => {
    if (!payAmount || isNaN(payAmount)) return alert("Nh·∫≠p s·ªë ti·ªÅn mu·ªën tr·∫£");
    const res = await fetch(`${import.meta.env.VITE_API_URL}/api/cong-no/cong-no-pay-customer`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        customer_name: selectedCustomer.customer_name,
        customer_phone: selectedCustomer.customer_phone,
        amount: payAmount,
        note: payNote
      }),
    });
    const data = await res.json();
    if (res.ok) {
      alert("‚úÖ ƒê√£ c·∫≠p nh·∫≠t c√¥ng n·ª£!");
      setPayAmount(""); 
      setPayNote("");
      await fetchDebts();
      setTimeout(() => {
        const updated = debts.find(d =>
          d.customer_name === selectedCustomer.customer_name &&
          d.customer_phone === selectedCustomer.customer_phone
        );
        if (updated) {
          setCustomerDebt({
            total_debt: updated.total_debt,
            total_paid: updated.total_paid,
            debt_history: updated.debt_history || []
          });
        }
      }, 200);
    } else {
      alert("‚ùå " + (data.message || "C·∫≠p nh·∫≠t c√¥ng n·ª£ th·∫•t b·∫°i!"));
    }
  };

  const handleAddDebt = async () => {
    if (!addAmount || isNaN(addAmount)) return alert("Nh·∫≠p s·ªë ti·ªÅn mu·ªën c·ªông n·ª£");
    const res = await fetch(`${import.meta.env.VITE_API_URL}/api/cong-no/cong-no-add-customer`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        customer_name: selectedCustomer.customer_name,
        customer_phone: selectedCustomer.customer_phone,
        amount: addAmount,
        note: addNote
      }),
    });
    const data = await res.json();
    if (res.ok) {
      alert("‚úÖ ƒê√£ c·ªông th√™m n·ª£!");
      setAddAmount(""); 
      setAddNote("");
      await fetchDebts();
      setTimeout(() => {
        const updated = debts.find(d =>
          d.customer_name === selectedCustomer.customer_name &&
          d.customer_phone === selectedCustomer.customer_phone
        );
        if (updated) {
          setCustomerDebt({
            total_debt: updated.total_debt,
            total_paid: updated.total_paid,
            debt_history: updated.debt_history || []
          });
        }
      }, 200);
    } else {
      alert("‚ùå " + (data.message || "C·ªông n·ª£ th·∫•t b·∫°i!"));
    }
  };

  const handleShowHistory = () => {
    setHistoryModal({ open: true, history: customerDebt.debt_history || [] });
  };

  const handleShowDetail = async (customer) => {
    const res = await fetch(
      `${import.meta.env.VITE_API_URL}/api/cong-no/cong-no-orders?customer_name=${encodeURIComponent(customer.customer_name)}&customer_phone=${encodeURIComponent(customer.customer_phone || "")}`
    );
    const data = await res.json();
    setDetailModal({ open: true, orders: data.orders || [] });
  };

  const handleEditCustomer = (customer) => {
    setEditForm({ name: customer.customer_name, phone: customer.customer_phone || "" });
    setEditModal({ open: true, customer });
  };

  const handleSaveCustomer = async () => {
    if (!editForm.name.trim()) return alert("T√™n kh√°ch h√†ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
    
    const res = await fetch(`${import.meta.env.VITE_API_URL}/api/cong-no/update-customer`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        old_customer_name: editModal.customer.customer_name,
        old_customer_phone: editModal.customer.customer_phone,
        new_customer_name: editForm.name.trim(),
        new_customer_phone: editForm.phone.trim()
      })
    });
    
    const data = await res.json();
    if (res.ok) {
      alert("‚úÖ " + data.message);
      setEditModal({ open: false, customer: null });
      fetchDebts();
    } else {
      alert("‚ùå " + (data.message || "L·ªói c·∫≠p nh·∫≠t"));
    }
  };

  const handleDeleteCustomer = async (customer) => {
    if (!window.confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a c√¥ng n·ª£ c·ªßa kh√°ch h√†ng "${customer.customer_name}"?`)) return;
    
    const res = await fetch(`${import.meta.env.VITE_API_URL}/api/cong-no/delete-customer`, {
      method: "DELETE",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        customer_name: customer.customer_name,
        customer_phone: customer.customer_phone
      })
    });
    
    const data = await res.json();
    if (res.ok) {
      alert("‚úÖ " + data.message);
      fetchDebts();
    } else {
      alert("‚ùå " + (data.message || "L·ªói x√≥a"));
    }
  };

  useEffect(() => {
    fetchDebts();
  }, [searchText, showAll]);

  // Clear filters function
  const clearFilters = () => {
    setSearchText("");
    setShowAll(false);
  };

  // Table columns definition - T·ª± ƒë·ªông switch theo tab
  const tableColumns = activeTab === "khach_no" ? [
    {
      header: "Kh√°ch h√†ng",
      key: "customer",
      render: (customer) => (
        <div>
          <div className="text-sm font-semibold text-gray-900">{customer.customer_name}</div>
          <div className="text-sm text-gray-500">{customer.customer_phone || 'Ch∆∞a c√≥ SƒêT'}</div>
        </div>
      )
    },
    {
      header: "T·ªïng n·ª£",
      key: "total_debt",
      render: (customer) => (
        <div className="text-sm font-bold text-red-600">
          {formatCurrency(customer.total_debt)}
        </div>
      )
    },
    {
      header: "ƒê√£ tr·∫£",
      key: "total_paid",
      render: (customer) => (
        <div className="text-sm font-bold text-green-600">
          {formatCurrency(customer.total_paid)}
        </div>
      )
    },
    {
      header: "C√≤n n·ª£",
      key: "remaining",
      render: (customer) => {
        // Logic: total_debt l√† s·ªë c√≤n n·ª£, kh√¥ng c·∫ßn tr·ª´ total_paid
        const remaining = customer.total_debt; // debt ƒë√£ l√† s·ªë c√≤n n·ª£
  return (
          <div className={`text-sm font-bold ${remaining > 0 ? 'text-orange-600' : 'text-green-600'}`}>
            {formatCurrency(remaining)}
      </div>
        );
      }
    },
    {
      header: "Tr·∫°ng th√°i",
      key: "status",
      render: (customer) => {
        const remaining = customer.total_debt; // debt ƒë√£ l√† s·ªë c√≤n n·ª£
        if (remaining <= 0) {
          return <span className="badge-success">‚úÖ ƒê√£ thanh to√°n</span>;
        } else if (customer.total_paid > 0) {
          return <span className="badge-yellow">‚ö†Ô∏è ƒê√£ tr·∫£ m·ªôt ph·∫ßn</span>;
        } else {
          return <span className="badge-danger">‚ùå Ch∆∞a tr·∫£</span>;
        }
      }
    },
    {
      header: "Thao t√°c",
      key: "actions",
      render: (customer) => (
        <div className="flex gap-2 flex-wrap">
        <button
            onClick={() => handleSelectCustomer(customer)} 
            className="btn-action-edit text-xs"
        >
            üí∞ Qu·∫£n l√Ω
        </button>
        <button
            onClick={() => handleShowDetail(customer)} 
            className="btn-action-edit text-xs"
        >
            üìã Chi ti·∫øt
        </button>
        <button
            onClick={() => handleEditCustomer(customer)} 
            className="btn-action-edit text-xs"
        >
            ‚úèÔ∏è S·ª≠a
        </button>
        <button
            onClick={() => handleDeleteCustomer(customer)} 
            className="btn-action-delete text-xs"
        >
            üóëÔ∏è X√≥a
        </button>
      </div>
      )
    }
  ] : [
    // Supplier Debt columns
    {
      header: "Nh√† cung c·∫•p",
      key: "supplier",
      render: (supplier) => (
        <div>
          <div className="text-sm font-semibold text-gray-900">{supplier.supplier_name}</div>
          <div className="text-sm text-gray-500">{supplier.supplier_phone || 'Ch∆∞a c√≥ SƒêT'}</div>
        </div>
      )
    },
    {
      header: "T·ªïng n·ª£",
      key: "total_debt",
      render: (supplier) => (
        <div className="text-sm font-bold text-red-600">
          {formatCurrency(supplier.total_debt)}
        </div>
      )
    },
    {
      header: "ƒê√£ tr·∫£",
      key: "total_paid",
      render: (supplier) => (
        <div className="text-sm font-bold text-green-600">
          {formatCurrency(supplier.total_paid)}
        </div>
      )
    },
    {
      header: "C√≤n n·ª£",
      key: "remaining",
      render: (supplier) => {
        const remaining = supplier.total_debt;
        return (
          <div className={`text-sm font-bold ${remaining > 0 ? 'text-orange-600' : 'text-green-600'}`}>
            {formatCurrency(remaining)}
          </div>
        );
      }
    },
    {
      header: "Tr·∫°ng th√°i",
      key: "status",
      render: (supplier) => {
        const remaining = supplier.total_debt;
        if (remaining <= 0) {
          return <span className="badge-success">‚úÖ ƒê√£ thanh to√°n</span>;
        } else if (supplier.total_paid > 0) {
          return <span className="badge-yellow">‚ö†Ô∏è ƒê√£ tr·∫£ m·ªôt ph·∫ßn</span>;
        } else {
          return <span className="badge-danger">‚ùå Ch∆∞a tr·∫£</span>;
        }
      }
    },
    {
      header: "Thao t√°c",
      key: "actions",
      render: (supplier) => (
        <div className="flex gap-2 flex-wrap">
          <button
            onClick={() => handleSelectSupplier(supplier)} 
            className="btn-action-edit text-xs"
          >
            üí∞ Qu·∫£n l√Ω
          </button>
          <button
            onClick={() => handleShowSupplierDetail(supplier)} 
            className="btn-action-edit text-xs"
          >
            üìã Chi ti·∫øt
          </button>
        </div>
      )
    }
  ];

  // useEffect ƒë·ªÉ fetch data khi tab thay ƒë·ªïi
  useEffect(() => {
    if (activeTab === "khach_no") {
      fetchDebts();
    } else {
      fetchSupplierDebts();
    }
  }, [activeTab, searchText, showAll]);

  // ‚úÖ Show loading spinner khi ƒëang fetch
  if ((activeTab === "khach_no" && loading) || (activeTab === "minh_no_ncc" && supplierLoading)) {
    return (
      <Layout 
        activeTab="cong-no"
        title="üí≥ C√¥ng N·ª£"
        subtitle="ƒêang t·∫£i d·ªØ li·ªáu..."
      >
        <div className="flex items-center justify-center py-20">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto mb-4"></div>
            <p className="text-gray-600">ƒêang t·∫£i d·ªØ li·ªáu c√¥ng n·ª£...</p>
          </div>
        </div>
      </Layout>
    );
  }

  return (
    <Layout 
      activeTab="cong-no"
      title="üí≥ C√¥ng N·ª£"
      subtitle={activeTab === "khach_no" ? "Qu·∫£n l√Ω c√¥ng n·ª£ kh√°ch h√†ng" : "Qu·∫£n l√Ω c√¥ng n·ª£ nh√† cung c·∫•p"}
    >
      {/* Tab Navigation */}
      <div className="bg-white rounded-2xl shadow-sm border border-gray-200 p-1 mb-6">
        <div className="flex">
          <button
            onClick={() => {
              setActiveTab("khach_no");
              setSelectedCustomer(null);
              setSelectedSupplier(null);
            }}
            className={`flex-1 py-3 px-6 rounded-xl font-semibold transition-all duration-200 ${
              activeTab === "khach_no"
                ? "bg-blue-600 text-white shadow-md"
                : "text-gray-600 hover:text-blue-600"
            }`}
          >
            üë• Kh√°ch n·ª£ m√¨nh
          </button>
          <button
            onClick={() => {
              setActiveTab("minh_no_ncc");
              setSelectedCustomer(null);
              setSelectedSupplier(null);
            }}
            className={`flex-1 py-3 px-6 rounded-xl font-semibold transition-all duration-200 ${
              activeTab === "minh_no_ncc"
                ? "bg-orange-600 text-white shadow-md"
                : "text-gray-600 hover:text-orange-600"
            }`}
          >
            üè™ M√¨nh n·ª£ nh√† cung c·∫•p
          </button>
        </div>
      </div>

      {/* Stats Dashboard */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <StatsCard
          title="T·ªïng c√¥ng n·ª£"
          value={formatCurrency(stats.totalDebt || 0)}
          icon="üí≥"
          color="red"
          subtitle="T·ªïng ti·ªÅn ch∆∞a thu"
            />
        <StatsCard
          title={activeTab === "khach_no" ? "S·ªë kh√°ch h√†ng" : "S·ªë nh√† cung c·∫•p"}
          value={(stats.totalCustomers || 0).toString()}
          icon="üë•"
          color="blue"
          subtitle={activeTab === "khach_no" ? "Kh√°ch h√†ng c√≥ n·ª£" : "Nh√† cung c·∫•p c√≥ n·ª£"}
        />
        <StatsCard
          title="N·ª£ l·ªõn nh·∫•t"
          value={formatCurrency(stats.largestDebt || 0)}
          icon="‚ö†Ô∏è"
          color="orange"
          subtitle={activeTab === "khach_no" ? "Kh√°ch n·ª£ nhi·ªÅu nh·∫•t" : "NCC nhi·ªÅu nh·∫•t"}
            />
        <StatsCard
          title="N·ª£ trung b√¨nh"
          value={formatCurrency(stats.averageDebt || 0)}
          icon="üìä"
          color="purple"
          subtitle={activeTab === "khach_no" ? "Trung b√¨nh m·ªói kh√°ch" : "Trung b√¨nh m·ªói NCC"}
        />
      </div>

      {/* Customer Management Form */}
      {selectedCustomer && (
        <FormCard
          title={`üí∞ Qu·∫£n l√Ω c√¥ng n·ª£: ${selectedCustomer.customer_name}`}
          subtitle={`SƒêT: ${selectedCustomer.customer_phone || 'Ch∆∞a c√≥'} ‚Ä¢ C√≤n n·ª£: ${formatCurrency(customerDebt.total_debt)}`}
          onReset={() => setSelectedCustomer(null)}
          showReset={true}
          resetLabel="ƒê√≥ng"
        >
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            {/* Pay Debt Form */}
            <div className="space-y-4">
              <h4 className="text-lg font-semibold text-green-600">üí∏ Tr·∫£ n·ª£</h4>
            <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">S·ªë ti·ªÅn tr·∫£</label>
              <input
                type="number"
                  placeholder="Nh·∫≠p s·ªë ti·ªÅn"
                value={payAmount}
                  onChange={(e) => setPayAmount(e.target.value)}
                  className="form-input"
              />
              </div>
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">Ghi ch√∫</label>
              <input
                type="text"
                placeholder="Ghi ch√∫ tr·∫£ n·ª£"
                value={payNote}
                  onChange={(e) => setPayNote(e.target.value)}
                  className="form-input"
              />
              </div>
              <button
                onClick={handlePayDebt}
                className="w-full bg-green-600 hover:bg-green-700 text-white py-3 rounded-xl transition-all font-medium"
              >
                ‚úÖ X√°c nh·∫≠n tr·∫£ n·ª£
              </button>
            </div>

            {/* Add Debt Form */}
            <div className="space-y-4">
              <h4 className="text-lg font-semibold text-orange-600">üìà C·ªông n·ª£</h4>
            <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">S·ªë ti·ªÅn c·ªông</label>
              <input
                type="number"
                  placeholder="Nh·∫≠p s·ªë ti·ªÅn"
                value={addAmount}
                  onChange={(e) => setAddAmount(e.target.value)}
                  className="form-input"
              />
              </div>
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">Ghi ch√∫</label>
              <input
                type="text"
                placeholder="Ghi ch√∫ c·ªông n·ª£"
                value={addNote}
                  onChange={(e) => setAddNote(e.target.value)}
                  className="form-input"
              />
              </div>
              <button
                onClick={handleAddDebt}
                className="w-full bg-orange-600 hover:bg-orange-700 text-white py-3 rounded-xl transition-all font-medium"
              >
                ‚ûï C·ªông th√™m n·ª£
              </button>
            </div>
          </div>

          <div className="mt-6 pt-6 border-t border-gray-200">
              <button
                onClick={handleShowHistory}
              className="bg-purple-600 hover:bg-purple-700 text-white px-6 py-3 rounded-xl transition-all font-medium"
              >
              üìà Xem l·ªãch s·ª≠ giao d·ªãch
              </button>
            </div>
        </FormCard>
      )}

      {/* Supplier Management Form */}
      {selectedSupplier && (
        <FormCard
          title={`üè™ Qu·∫£n l√Ω n·ª£ nh√† cung c·∫•p: ${selectedSupplier.supplier_name}`}
          subtitle={`C√≤n n·ª£: ${formatCurrency(supplierDebt.total_debt)}`}
          onReset={() => setSelectedSupplier(null)}
          showReset={true}
          resetLabel="ƒê√≥ng"
        >
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            {/* Pay Debt Form */}
            <div className="space-y-4">
              <h4 className="text-lg font-semibold text-green-600">üí∏ Tr·∫£ n·ª£ NCC</h4>
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">S·ªë ti·ªÅn tr·∫£</label>
                <input
                  type="number"
                  placeholder="Nh·∫≠p s·ªë ti·ªÅn tr·∫£"
                  value={payAmount}
                  onChange={(e) => setPayAmount(e.target.value)}
                  className="form-input"
                />
              </div>
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">Ghi ch√∫</label>
                <input
                  type="text"
                  placeholder="Ghi ch√∫ tr·∫£ n·ª£"
                  value={payNote}
                  onChange={(e) => setPayNote(e.target.value)}
                  className="form-input"
                />
              </div>
              <button
                onClick={handlePaySupplierDebt}
                className="w-full bg-green-600 hover:bg-green-700 text-white py-3 rounded-xl transition-all font-medium"
              >
                ‚úÖ X√°c nh·∫≠n tr·∫£ n·ª£
              </button>
            </div>

            {/* Add Debt Form */}
            <div className="space-y-4">
              <h4 className="text-lg font-semibold text-orange-600">üìà C·ªông n·ª£ NCC</h4>
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">S·ªë ti·ªÅn c·ªông</label>
                <input
                  type="number"
                  placeholder="Nh·∫≠p s·ªë ti·ªÅn c·ªông n·ª£"
                  value={addAmount}
                  onChange={(e) => setAddAmount(e.target.value)}
                  className="form-input"
                />
              </div>
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">Ghi ch√∫</label>
                <input
                  type="text"
                  placeholder="Ghi ch√∫ c·ªông n·ª£"
                  value={addNote}
                  onChange={(e) => setAddNote(e.target.value)}
                  className="form-input"
                />
              </div>
              <button
                onClick={handleAddSupplierDebt}
                className="w-full bg-orange-600 hover:bg-orange-700 text-white py-3 rounded-xl transition-all font-medium"
              >
                ‚ûï C·ªông th√™m n·ª£
              </button>
            </div>
          </div>

          <div className="mt-6 pt-6 border-t border-gray-200">
            <button
              onClick={() => setHistoryModal({ open: true, history: supplierDebt.debt_history || [] })}
              className="bg-purple-600 hover:bg-purple-700 text-white px-6 py-3 rounded-xl transition-all font-medium"
            >
              üìà Xem l·ªãch s·ª≠ giao d·ªãch
            </button>
          </div>
        </FormCard>
      )}

      {/* Filters */}
      <FilterCard onClearFilters={clearFilters}>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <input
              type="text"
              placeholder="üîç T√¨m t√™n, SƒêT kh√°ch h√†ng..."
              value={searchText}
              onChange={(e) => setSearchText(e.target.value)}
              className="form-input"
            />
          </div>
          <div>
            <label className="flex items-center space-x-2">
              <input
                type="checkbox"
                checked={showAll}
                onChange={(e) => setShowAll(e.target.checked)}
                className="w-4 h-4 text-purple-600 rounded focus:ring-purple-500"
              />
              <span className="text-sm font-medium text-gray-700">Hi·ªÉn th·ªã c·∫£ kh√°ch ƒë√£ tr·∫£ h·∫øt n·ª£</span>
            </label>
          </div>
        </div>
      </FilterCard>

      {/* Data Table */}
      <DataTable
        title={activeTab === "khach_no" ? "üìã Danh s√°ch c√¥ng n·ª£ kh√°ch h√†ng" : "üìã Danh s√°ch c√¥ng n·ª£ nh√† cung c·∫•p"}
        data={
          activeTab === "khach_no" 
            ? debts.map(item => ({ ...item, id: item._id || `${item.customer_name}-${item.customer_phone}` }))
            : supplierDebts.map(item => ({ ...item, id: item._id || `${item.supplier_name}-${item.supplier_phone}` }))
        }
        columns={tableColumns}
        currentPage={1}
        totalPages={1}
        itemsPerPage={activeTab === "khach_no" ? debts.length : supplierDebts.length}
        totalItems={activeTab === "khach_no" ? debts.length : supplierDebts.length}
        emptyMessage={
          activeTab === "khach_no" 
            ? "Ch∆∞a c√≥ kh√°ch h√†ng n√†o c√≤n n·ª£" 
            : "Ch∆∞a c√≥ nh√† cung c·∫•p n√†o m√¨nh ƒëang n·ª£. H√£y nh·∫≠p h√†ng v·ªõi c√¥ng n·ª£ ƒë·ªÉ t·∫°o d·ªØ li·ªáu."
        }
      />

      {/* History Modal */}
      {historyModal.open && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-2xl p-8 max-w-4xl w-full mx-4 max-h-[80vh] overflow-y-auto">
            <h3 className="text-xl font-bold text-gray-900 mb-6">üìà L·ªãch s·ª≠ giao d·ªãch</h3>
            <div className="space-y-3">
              {historyModal.history.length === 0 ? (
                <p className="text-gray-500 text-center py-8">Ch∆∞a c√≥ giao d·ªãch n√†o</p>
              ) : (
                historyModal.history.map((item, index) => (
                  <div key={index} className="bg-gray-50 p-4 rounded-xl">
                    <div className="flex justify-between items-start">
                      <div>
                        <div className={`font-semibold ${item.type === 'pay' ? 'text-green-600' : 'text-orange-600'}`}>
                          {item.type === 'pay' ? 'üí∏ Tr·∫£ n·ª£' : 'üìà C·ªông n·ª£'}: {formatNumber(item.amount)}ƒë
                        </div>
                        <div className="text-sm text-gray-600 mt-1">{item.note || 'Kh√¥ng c√≥ ghi ch√∫'}</div>
                      </div>
                      <div className="text-sm text-gray-500">
                        {new Date(item.date).toLocaleString('vi-VN')}
                      </div>
                    </div>
                  </div>
                ))
              )}
            </div>
            <div className="mt-6 flex justify-end">
              <button
                onClick={() => setHistoryModal({ open: false, history: [] })}
                className="bg-gray-500 hover:bg-gray-600 text-white px-6 py-3 rounded-xl transition-all"
              >
                ‚ùå ƒê√≥ng
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Detail Modal */}
      {detailModal.open && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-2xl p-8 max-w-6xl w-full mx-4 max-h-[80vh] overflow-y-auto">
            <h3 className="text-xl font-bold text-gray-900 mb-6">üìã Chi ti·∫øt s·∫£n ph·∫©m ƒë√£ mua</h3>
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-4 py-3 text-left text-xs font-bold text-gray-600 uppercase">S·∫£n ph·∫©m</th>
                    <th className="px-4 py-3 text-left text-xs font-bold text-gray-600 uppercase">S·ªë l∆∞·ª£ng</th>
                    <th className="px-4 py-3 text-left text-xs font-bold text-gray-600 uppercase">Gi√° b√°n</th>
                    <th className="px-4 py-3 text-left text-xs font-bold text-gray-600 uppercase">C√¥ng n·ª£</th>
                    <th className="px-4 py-3 text-left text-xs font-bold text-gray-600 uppercase">Ng√†y b√°n</th>
                  </tr>
                </thead>
                <tbody>
                  {detailModal.orders.map((order, index) => (
                    <tr key={index} className="border-b border-gray-200">
                      <td className="px-4 py-3">{order.product_name}</td>
                      <td className="px-4 py-3">{order.quantity || 1}</td>
                                          <td className="px-4 py-3">{formatCurrency(order.price_sell)}</td>
                    <td className="px-4 py-3">{formatCurrency(order.debt)}</td>
                      <td className="px-4 py-3">{order.sold_date ? new Date(order.sold_date).toLocaleDateString('vi-VN') : ''}</td>
                    </tr>
                  ))}
              </tbody>
            </table>
            </div>
            <div className="mt-6 flex justify-end">
              <button
                onClick={() => setDetailModal({ open: false, orders: [] })}
                className="bg-gray-500 hover:bg-gray-600 text-white px-6 py-3 rounded-xl transition-all"
              >
                ‚ùå ƒê√≥ng
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Edit Customer Modal */}
      {editModal.open && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-2xl p-8 max-w-md w-full mx-4">
            <h3 className="text-xl font-bold text-gray-900 mb-6">‚úèÔ∏è S·ª≠a th√¥ng tin kh√°ch h√†ng</h3>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">T√™n kh√°ch h√†ng</label>
                <input
                  type="text"
                  value={editForm.name}
                  onChange={(e) => setEditForm(prev => ({ ...prev, name: e.target.value }))}
                  className="form-input"
                  placeholder="Nh·∫≠p t√™n kh√°ch h√†ng"
                />
              </div>
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">S·ªë ƒëi·ªán tho·∫°i</label>
                <input
                  type="text"
                  value={editForm.phone}
                  onChange={(e) => setEditForm(prev => ({ ...prev, phone: e.target.value }))}
                  className="form-input"
                  placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                />
              </div>
              <div className="flex gap-3 pt-4">
              <button
                onClick={() => setEditModal({ open: false, customer: null })}
                  className="flex-1 bg-gray-500 hover:bg-gray-600 text-white py-3 rounded-xl transition-all"
              >
                ‚ùå H·ªßy
              </button>
                <button
                  onClick={handleSaveCustomer}
                  className="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-3 rounded-xl transition-all"
                >
                  ‚úÖ L∆∞u
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </Layout>
  );
}

export default CongNo;
