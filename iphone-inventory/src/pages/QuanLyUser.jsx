import { useEffect, useState } from "react";
import Layout from "../components/Layout";
import StatsCard from "../components/StatsCard";
import DataTable from "../components/DataTable";

function QuanLyUser() {
  const [users, setUsers] = useState([]);
  const [branches, setBranches] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [approvingId, setApprovingId] = useState(null);
  const [activeTab, setActiveTab] = useState("all"); // pending, all, create - M·∫∑c ƒë·ªãnh l√† "all"
  const [allUsers, setAllUsers] = useState([]);

  // State cho form t·∫°o user m·ªõi
  const [createUserModal, setCreateUserModal] = useState(false);
  const [createUserForm, setCreateUserForm] = useState({
    email: "",
    password: "",
    username: null, // Thay ƒë·ªïi t·ª´ "" th√†nh null
    role: "nhan_vien_ban_hang",
    branch_id: "",
    branch_name: "",
    full_name: "",
    phone: "",
  });

  // States cho c√°c modal m·ªõi
  const [changePasswordModal, setChangePasswordModal] = useState({ open: false, user: null });
  const [updateUserModal, setUpdateUserModal] = useState({ open: false, user: null });
  const [deleteUserModal, setDeleteUserModal] = useState({ open: false, user: null });
  
  // Forms cho c√°c modal
  const [changePasswordForm, setChangePasswordForm] = useState({
    currentPassword: "",
    newPassword: "",
    confirmPassword: ""
  });
  
  const [updateUserForm, setUpdateUserForm] = useState({
    full_name: "",
    email: "",
    phone: "",
    role: "",
    branch_id: ""
  });

  // Load danh s√°ch chi nh√°nh
  const fetchBranches = async () => {
    try {
      const token = localStorage.getItem("token") || sessionStorage.getItem("token");
      const res = await fetch(`${import.meta.env.VITE_API_URL || ''}/api/branches`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      if (res.ok) {
        const data = await res.json();
        setBranches(data);
      }
    } catch (err) {
      console.error("Error loading branches:", err);
    }
  };

  const fetchPendingUsers = async () => {
    setLoading(true);
    setError("");
    try {
      const token = localStorage.getItem("token") || sessionStorage.getItem("token");
      const res = await fetch(`${import.meta.env.VITE_API_URL || ''}/api/user/pending-users`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      if (!res.ok) {
        throw new Error("L·∫•y danh s√°ch user th·∫•t b·∫°i");
      }
      const data = await res.json();
      setUsers(data);
    } catch (err) {
      setError(err.message || "L·ªói khi l·∫•y d·ªØ li·ªáu");
    }
    setLoading(false);
  };

  const fetchAllUsers = async () => {
    setLoading(true);
    setError("");
    try {
      const token = localStorage.getItem("token") || sessionStorage.getItem("token");
      const res = await fetch(`${import.meta.env.VITE_API_URL || ''}/api/user/all-users`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      if (!res.ok) {
        throw new Error("L·∫•y danh s√°ch user th·∫•t b·∫°i");
      }
      const data = await res.json();
      setAllUsers(data);
    } catch (err) {
      setError(err.message || "L·ªói khi l·∫•y d·ªØ li·ªáu");
    }
    setLoading(false);
  };

  useEffect(() => {
    fetchBranches();
    if (activeTab === "pending") {
    fetchPendingUsers();
    } else if (activeTab === "all") {
      fetchAllUsers();
    }
  }, [activeTab]);

  const handleApprove = async (userId) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën ph√™ duy·ªát user n√†y?")) return;
    setApprovingId(userId);
    try {
      const token = localStorage.getItem("token") || sessionStorage.getItem("token");
      const res = await fetch(`${import.meta.env.VITE_API_URL || ''}/api/user/approve-user/${userId}`, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      if (!res.ok) {
        throw new Error("Ph√™ duy·ªát user th·∫•t b·∫°i");
      }
      alert("‚úÖ ƒê√£ ph√™ duy·ªát user th√†nh c√¥ng");
      fetchPendingUsers();
    } catch (err) {
      alert(err.message || "L·ªói khi ph√™ duy·ªát user");
    }
    setApprovingId(null);
  };

  const handleCreateUser = async (e) => {
    e.preventDefault();
    try {
      const token = localStorage.getItem("token") || sessionStorage.getItem("token");
      
      // T√¨m branch ƒë∆∞·ª£c ch·ªçn
      const selectedBranch = branches.find(b => b._id === createUserForm.branch_id);
      
      const userData = {
        ...createUserForm,
        branch_name: selectedBranch ? selectedBranch.name : "",
      };

      console.log("üîß Creating user with data:", userData);
      console.log("üîß API URL:", `${import.meta.env.VITE_API_URL || ''}/api/auth/register`);

      const res = await fetch(`${import.meta.env.VITE_API_URL || ''}/api/auth/register`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(userData),
      });

      console.log("üîß Response status:", res.status);
      const data = await res.json();
      console.log("üîß Response data:", data);

      if (res.ok) {
        alert("‚úÖ T·∫°o t√†i kho·∫£n th√†nh c√¥ng");
        setCreateUserModal(false);
        setCreateUserForm({
          email: "",
          password: "",
          username: null, // Thay ƒë·ªïi t·ª´ "" th√†nh null
          role: "nhan_vien_ban_hang",
          branch_id: "",
          branch_name: "",
          full_name: "",
          phone: "",
        });
        if (activeTab === "all") {
          fetchAllUsers();
        }
      } else {
        alert(`‚ùå ${data.message}`);
      }
    } catch (err) {
      alert("‚ùå L·ªói khi t·∫°o t√†i kho·∫£n");
    }
  };

  const handleUpdateUserRole = async (userId, newRole) => {
    try {
      const token = localStorage.getItem("token") || sessionStorage.getItem("token");
      const res = await fetch(`${import.meta.env.VITE_API_URL || ''}/api/user/update-role/${userId}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ role: newRole }),
      });

      if (res.ok) {
        alert("‚úÖ C·∫≠p nh·∫≠t vai tr√≤ th√†nh c√¥ng");
        fetchAllUsers();
      } else {
        alert("‚ùå C·∫≠p nh·∫≠t vai tr√≤ th·∫•t b·∫°i");
      }
    } catch (err) {
      alert("‚ùå L·ªói khi c·∫≠p nh·∫≠t vai tr√≤");
    }
  };

  // Handlers cho c√°c modal m·ªõi
  const handleChangePassword = async () => {
    if (!changePasswordForm.newPassword || !changePasswordForm.confirmPassword) {
      alert("‚ùå Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi");
      return;
    }
    
    if (changePasswordForm.newPassword !== changePasswordForm.confirmPassword) {
      alert("‚ùå M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp");
      return;
    }
    
    try {
      const token = localStorage.getItem("token") || sessionStorage.getItem("token");
      const payload = {
        newPassword: changePasswordForm.newPassword
      };
      
      // N·∫øu kh√¥ng ph·∫£i admin ƒë·ªïi m·∫≠t kh·∫©u cho ng∆∞·ªùi kh√°c th√¨ c·∫ßn m·∫≠t kh·∫©u hi·ªán t·∫°i
      const currentUser = JSON.parse(localStorage.getItem('user') || '{}');
      if (currentUser.role !== 'admin' && changePasswordModal.user._id !== currentUser._id) {
        payload.currentPassword = changePasswordForm.currentPassword;
      }
      
      const res = await fetch(`${import.meta.env.VITE_API_URL || ''}/api/user/change-password/${changePasswordModal.user._id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(payload),
      });

      if (res.ok) {
        alert("‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng");
        setChangePasswordModal({ open: false, user: null });
        setChangePasswordForm({ currentPassword: "", newPassword: "", confirmPassword: "" });
      } else {
        const data = await res.json();
        alert(`‚ùå ${data.message || 'ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i'}`);
      }
    } catch (err) {
      alert("‚ùå L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u");
    }
  };

  const handleUpdateUser = async () => {
    if (!updateUserForm.full_name.trim()) {
      alert("‚ùå Vui l√≤ng nh·∫≠p h·ªç t√™n");
      return;
    }
    
    try {
      const token = localStorage.getItem("token") || sessionStorage.getItem("token");
      
      // Chu·∫©n b·ªã payload, x·ª≠ l√Ω branch_id cho admin
      const payload = { ...updateUserForm };
      if (payload.role === 'admin') {
        payload.branch_id = null; // Admin kh√¥ng c·∫ßn branch_id
        payload.branch_name = null;
      } else if (!payload.branch_id) {
        alert("‚ùå Vui l√≤ng ch·ªçn chi nh√°nh cho user kh√¥ng ph·∫£i admin");
        return;
      }
      
      const res = await fetch(`${import.meta.env.VITE_API_URL || ''}/api/user/update/${updateUserModal.user._id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(payload),
      });

      if (res.ok) {
        alert("‚úÖ C·∫≠p nh·∫≠t th√¥ng tin user th√†nh c√¥ng");
        setUpdateUserModal({ open: false, user: null });
        setUpdateUserForm({ full_name: "", email: "", phone: "", role: "", branch_id: "" });
        fetchAllUsers();
      } else {
        const data = await res.json();
        alert(`‚ùå ${data.message || 'C·∫≠p nh·∫≠t th·∫•t b·∫°i'}`);
      }
    } catch (err) {
      console.error('‚ùå Error updating user:', err);
      alert("‚ùå L·ªói khi c·∫≠p nh·∫≠t user");
    }
  };

  const handleDeleteUser = async () => {
    if (!window.confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a user "${deleteUserModal.user.email}"?`)) {
      return;
    }
    
    try {
      const token = localStorage.getItem("token") || sessionStorage.getItem("token");
      const res = await fetch(`${import.meta.env.VITE_API_URL || ''}/api/user/${deleteUserModal.user._id}`, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (res.ok) {
        alert("‚úÖ X√≥a user th√†nh c√¥ng");
        setDeleteUserModal({ open: false, user: null });
        fetchAllUsers();
      } else {
        const data = await res.json();
        alert(`‚ùå ${data.message || 'X√≥a user th·∫•t b·∫°i'}`);
      }
    } catch (err) {
      alert("‚ùå L·ªói khi x√≥a user");
    }
  };

  // M·ªü c√°c modal
  const openChangePasswordModal = (user) => {
    setChangePasswordModal({ open: true, user });
    setChangePasswordForm({ currentPassword: "", newPassword: "", confirmPassword: "" });
  };

  const openUpdateUserModal = (user) => {
    setUpdateUserModal({ open: true, user });
    setUpdateUserForm({
      full_name: user.full_name || "",
      email: user.email || "",
      phone: user.phone || "",
      role: user.role || "",
      branch_id: user.branch_id || ""
    });
  };

  const openDeleteUserModal = (user) => {
    setDeleteUserModal({ open: true, user });
  };

  // Stats calculation
  const stats = {
    totalPending: users.length,
    totalUsers: allUsers.length,
    totalToday: users.filter(user => {
      const today = new Date().toDateString();
      const userDate = new Date(user.createdAt).toDateString();
      return userDate === today;
    }).length
  };

  // Table columns for pending users
  const pendingColumns = [
    {
      header: "Email",
      key: "email",
      render: (user) => (
        <div className="text-sm font-medium text-gray-900">
          {user.email}
        </div>
      )
    },
    {
      header: "H·ªç t√™n",
      key: "full_name",
      render: (user) => (
        <div className="text-sm text-gray-600">
          {user.full_name || "Ch∆∞a c√≥"}
        </div>
      )
    },
    {
      header: "Ng√†y ƒëƒÉng k√Ω",
      key: "createdAt",
      render: (user) => (
        <div className="text-sm text-gray-500">
          {new Date(user.createdAt).toLocaleString('vi-VN')}
        </div>
      )
    },
    {
      header: "Tr·∫°ng th√°i",
      key: "status",
      render: (user) => (
        <span className="badge-orange">
          ‚è≥ Ch·ªù ph√™ duy·ªát
        </span>
      )
    },
    {
      header: "Thao t√°c",
      key: "actions",
      render: (user) => (
        <button
          className={`px-4 py-2 rounded-xl font-medium transition-all duration-200 ${
            approvingId === user._id
              ? 'bg-gray-400 text-white cursor-not-allowed'
              : 'bg-green-500 hover:bg-green-600 text-white'
          }`}
          disabled={approvingId === user._id}
          onClick={() => handleApprove(user._id)}
        >
          {approvingId === user._id ? "‚è≥ ƒêang ph√™ duy·ªát..." : "‚úÖ Ph√™ duy·ªát"}
        </button>
      )
    }
  ];

  // Table columns for all users
  const allUsersColumns = [
    {
      header: "Email",
      key: "email",
      render: (user) => (
        <div className="text-sm font-medium text-gray-900">
          {user.email}
        </div>
      )
    },
    {
      header: "H·ªç t√™n",
      key: "full_name",
      render: (user) => (
        <div className="text-sm text-gray-600">
          {user.full_name || "Ch∆∞a c√≥"}
        </div>
      )
    },
    {
      header: "Vai tr√≤",
      key: "role",
      render: (user) => {
        const roleLabels = {
          admin: "üëë Admin",
          thu_ngan: "üí∞ Thu ng√¢n",
          nhan_vien_ban_hang: "üõí Nh√¢n vi√™n b√°n h√†ng",
          user: "üë§ User"
        };
        return (
          <select
            value={user.role}
            onChange={(e) => handleUpdateUserRole(user._id, e.target.value)}
            className="text-sm bg-white border border-gray-300 rounded px-2 py-1"
          >
            <option value="nhan_vien_ban_hang">üõí Nh√¢n vi√™n b√°n h√†ng</option>
            <option value="thu_ngan">üí∞ Thu ng√¢n</option>
            <option value="admin">üëë Admin</option>
          </select>
        );
      }
    },
    {
      header: "Chi nh√°nh",
      key: "branch_name",
      render: (user) => (
        <div className="text-sm text-gray-600">
          {user.branch_name || "Ch∆∞a c√≥"}
        </div>
      )
    },
    {
      header: "Tr·∫°ng th√°i",
      key: "approved",
      render: (user) => (
        <span className={`badge-${user.approved ? 'green' : 'red'}`}>
          {user.approved ? "‚úÖ ƒê√£ duy·ªát" : "‚ùå Ch∆∞a duy·ªát"}
        </span>
      )
    },
    {
      header: "Thao t√°c",
      key: "actions",
      render: (user) => (
        <div className="flex gap-2">
          <button
            onClick={() => openChangePasswordModal(user)}
            className="px-2 py-1 bg-blue-500 text-white text-xs rounded hover:bg-blue-600"
          >
            üîë ƒê·ªïi MK
          </button>
          <button
            onClick={() => openUpdateUserModal(user)}
            className="px-2 py-1 bg-green-500 text-white text-xs rounded hover:bg-green-600"
          >
            ‚úèÔ∏è S·ª≠a
          </button>
          <button
            onClick={() => openDeleteUserModal(user)}
            className="px-2 py-1 bg-red-500 text-white text-xs rounded hover:bg-red-600"
          >
            üóëÔ∏è X√≥a
          </button>
        </div>
      )
    }
  ];

  const renderContent = () => {
  if (loading) {
    return (
        <div className="flex items-center justify-center py-20">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto mb-4"></div>
            <p className="text-gray-600">ƒêang t·∫£i danh s√°ch user...</p>
          </div>
        </div>
    );
  }

  if (error) {
    return (
        <div className="bg-red-50 border-l-4 border-red-500 p-6 rounded-2xl">
          <div className="flex items-center">
            <div className="text-red-600 text-xl mr-3">‚ùå</div>
            <div>
              <h3 className="text-lg font-semibold text-red-800">C√≥ l·ªói x·∫£y ra</h3>
              <p className="text-red-600">{error}</p>
            </div>
          </div>
        </div>
      );
    }

    if (activeTab === "pending") {
      return users.length === 0 ? (
        <div className="bg-white/80 backdrop-blur-sm rounded-3xl card-shadow p-12 text-center">
          <div className="text-6xl mb-4">üë•</div>
          <h3 className="text-xl font-bold text-gray-900 mb-2">Kh√¥ng c√≥ user n√†o ƒëang ch·ªù ph√™ duy·ªát</h3>
          <p className="text-gray-600">T·∫•t c·∫£ user ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát ho·∫∑c ch∆∞a c√≥ ƒëƒÉng k√Ω m·ªõi.</p>
        </div>
      ) : (
        <DataTable
          title="üìã Danh s√°ch User ch·ªù ph√™ duy·ªát"
          data={users.map(user => ({ ...user, id: user._id }))}
          columns={pendingColumns}
          currentPage={1}
          totalPages={1}
          itemsPerPage={users.length}
          totalItems={users.length}
        />
    );
  }

    if (activeTab === "all") {
      return (
        <DataTable
          title="üë• T·∫•t c·∫£ User trong h·ªá th·ªëng"
          data={allUsers.map(user => ({ ...user, id: user._id }))}
          columns={allUsersColumns}
          currentPage={1}
          totalPages={1}
          itemsPerPage={allUsers.length}
          totalItems={allUsers.length}
        />
      );
    }

    return null;
  };

  return (
    <Layout 
      activeTab="quan-ly-user"
      title="üë• Qu·∫£n L√Ω User"
      subtitle="Ph√™ duy·ªát v√† qu·∫£n l√Ω ng∆∞·ªùi d√πng"
    >
      {/* Stats Dashboard */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <StatsCard
          title="Ch·ªù ph√™ duy·ªát"
          value={stats.totalPending.toString()}
          icon="‚è≥"
          color="orange"
          subtitle="User ƒëang ch·ªù"
        />
        <StatsCard
          title="T·ªïng User"
          value={stats.totalUsers.toString()}
          icon="üë•"
          color="blue"
          subtitle="T·∫•t c·∫£ user"
        />
        <StatsCard
          title="ƒêƒÉng k√Ω h√¥m nay"
          value={stats.totalToday.toString()}
          icon="üìÖ"
          color="green"
          subtitle="User m·ªõi h√¥m nay"
        />
      </div>

      {/* Tab Navigation */}
      <div className="bg-white/80 backdrop-blur-sm rounded-3xl card-shadow p-6">
        <div className="flex flex-wrap gap-2 mb-6">
          <button
            onClick={() => setActiveTab("pending")}
            className={`px-4 py-2 rounded-xl font-medium transition-all ${
              activeTab === "pending"
                ? "bg-orange-500 text-white"
                : "bg-gray-200 text-gray-700 hover:bg-gray-300"
            }`}
          >
            ‚è≥ Ch·ªù ph√™ duy·ªát ({stats.totalPending})
          </button>
          <button
            onClick={() => setActiveTab("all")}
            className={`px-4 py-2 rounded-xl font-medium transition-all ${
              activeTab === "all"
                ? "bg-blue-500 text-white"
                : "bg-gray-200 text-gray-700 hover:bg-gray-300"
            }`}
          >
            üë• T·∫•t c·∫£ User ({stats.totalUsers})
          </button>
          <button
            onClick={() => setCreateUserModal(true)}
            className="px-4 py-2 rounded-xl font-medium bg-green-500 text-white hover:bg-green-600 transition-all"
          >
            ‚ûï T·∫°o User m·ªõi
          </button>
        </div>

        {renderContent()}
      </div>

      {/* Create User Modal */}
      {createUserModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-2xl p-8 max-w-md w-full mx-4 max-h-[90vh] overflow-y-auto">
            <h3 className="text-xl font-bold text-gray-900 mb-6">‚ûï T·∫°o t√†i kho·∫£n m·ªõi</h3>
            
            <form onSubmit={handleCreateUser} className="space-y-4">
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">Email *</label>
                <input
                  type="email"
                  value={createUserForm.email}
                  onChange={(e) => setCreateUserForm({...createUserForm, email: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">M·∫≠t kh·∫©u *</label>
                <input
                  type="password"
                  value={createUserForm.password}
                  onChange={(e) => setCreateUserForm({...createUserForm, password: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">Username (t√πy ch·ªçn)</label>
                <input
                  type="text"
                  value={createUserForm.username || ""}
                  onChange={(e) => setCreateUserForm({...createUserForm, username: e.target.value || null})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="ƒê·ªÉ tr·ªëng n·∫øu kh√¥ng c·∫ßn username"
                />
              </div>

              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">H·ªç t√™n</label>
                <input
                  type="text"
                  value={createUserForm.full_name}
                  onChange={(e) => setCreateUserForm({...createUserForm, full_name: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">S·ªë ƒëi·ªán tho·∫°i</label>
                <input
                  type="text"
                  value={createUserForm.phone}
                  onChange={(e) => setCreateUserForm({...createUserForm, phone: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">Vai tr√≤ *</label>
                <select
                  value={createUserForm.role}
                  onChange={(e) => setCreateUserForm({...createUserForm, role: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                >
                  <option value="nhan_vien_ban_hang">üõí Nh√¢n vi√™n b√°n h√†ng</option>
                  <option value="thu_ngan">üí∞ Thu ng√¢n</option>
                  <option value="admin">üëë Admin</option>
                </select>
              </div>

              {createUserForm.role !== 'admin' && (
                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">Chi nh√°nh *</label>
                  <select
                    value={createUserForm.branch_id}
                    onChange={(e) => setCreateUserForm({...createUserForm, branch_id: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  >
                    <option value="">Ch·ªçn chi nh√°nh</option>
                    {branches.map((branch) => (
                      <option key={branch._id} value={branch._id}>
                        {branch.name}
                      </option>
                    ))}
                  </select>
                </div>
              )}

              <div className="flex gap-3 pt-4">
                <button
                  type="button"
                  onClick={() => setCreateUserModal(false)}
                  className="flex-1 bg-gray-500 hover:bg-gray-600 text-white py-3 px-4 rounded-xl font-medium transition-colors"
                >
                  ‚ùå H·ªßy
                </button>
                <button
                  type="submit"
                  className="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-xl font-medium transition-colors"
                >
                  ‚ûï T·∫°o t√†i kho·∫£n
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Change Password Modal */}
      {changePasswordModal.open && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-2xl p-6 max-w-md w-full mx-4">
            <h3 className="text-xl font-bold text-gray-900 mb-4">üîë ƒê·ªïi m·∫≠t kh·∫©u - {changePasswordModal.user?.email}</h3>
            
            <div className="space-y-4">
              {/* Ch·ªâ hi·ªÉn th·ªã m·∫≠t kh·∫©u hi·ªán t·∫°i n·∫øu kh√¥ng ph·∫£i admin ƒë·ªïi cho ng∆∞·ªùi kh√°c */}
              {(() => {
                const currentUser = JSON.parse(localStorage.getItem('user') || '{}');
                const isAdminChangingOthers = currentUser.role === 'admin' && changePasswordModal.user._id !== currentUser._id;
                return !isAdminChangingOthers ? (
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">M·∫≠t kh·∫©u hi·ªán t·∫°i *</label>
                    <input
                      type="password"
                      value={changePasswordForm.currentPassword}
                      onChange={(e) => setChangePasswordForm({...changePasswordForm, currentPassword: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                      required
                    />
                  </div>
                ) : null;
              })()}
              
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">M·∫≠t kh·∫©u m·ªõi *</label>
                <input
                  type="password"
                  value={changePasswordForm.newPassword}
                  onChange={(e) => setChangePasswordForm({...changePasswordForm, newPassword: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                />
              </div>
              
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi *</label>
                <input
                  type="password"
                  value={changePasswordForm.confirmPassword}
                  onChange={(e) => setChangePasswordForm({...changePasswordForm, confirmPassword: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                />
              </div>
            </div>
            
            <div className="flex gap-3 mt-6">
              <button
                onClick={() => setChangePasswordModal({ open: false, user: null })}
                className="flex-1 bg-gray-500 hover:bg-gray-600 text-white py-3 px-4 rounded-xl font-medium transition-colors"
              >
                ‚ùå H·ªßy
              </button>
              <button
                onClick={handleChangePassword}
                className="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-xl font-medium transition-colors"
              >
                üîë ƒê·ªïi m·∫≠t kh·∫©u
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Update User Modal */}
      {updateUserModal.open && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-2xl p-6 max-w-md w-full mx-4 max-h-[90vh] overflow-y-auto">
            <h3 className="text-xl font-bold text-gray-900 mb-4">‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin user</h3>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">H·ªç t√™n *</label>
                <input
                  type="text"
                  value={updateUserForm.full_name}
                  onChange={(e) => setUpdateUserForm({...updateUserForm, full_name: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                />
              </div>
              
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">Email</label>
                <input
                  type="email"
                  value={updateUserForm.email}
                  onChange={(e) => setUpdateUserForm({...updateUserForm, email: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
              
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">S·ªë ƒëi·ªán tho·∫°i</label>
                <input
                  type="text"
                  value={updateUserForm.phone}
                  onChange={(e) => setUpdateUserForm({...updateUserForm, phone: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
              
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">Vai tr√≤</label>
                <select
                  value={updateUserForm.role}
                  onChange={(e) => setUpdateUserForm({...updateUserForm, role: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="nhan_vien_ban_hang">üõí Nh√¢n vi√™n b√°n h√†ng</option>
                  <option value="thu_ngan">üí∞ Thu ng√¢n</option>
                  <option value="admin">üëë Admin</option>
                </select>
              </div>
              
              {updateUserForm.role !== 'admin' && (
                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">Chi nh√°nh</label>
                  <select
                    value={updateUserForm.branch_id}
                    onChange={(e) => setUpdateUserForm({...updateUserForm, branch_id: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Ch·ªçn chi nh√°nh</option>
                    {branches.map((branch) => (
                      <option key={branch._id} value={branch._id}>
                        {branch.name}
                      </option>
                    ))}
                  </select>
                </div>
              )}
            </div>
            
            <div className="flex gap-3 mt-6">
              <button
                onClick={() => setUpdateUserModal({ open: false, user: null })}
                className="flex-1 bg-gray-500 hover:bg-gray-600 text-white py-3 px-4 rounded-xl font-medium transition-colors"
              >
                ‚ùå H·ªßy
              </button>
              <button
                onClick={handleUpdateUser}
                className="flex-1 bg-green-600 hover:bg-green-700 text-white py-3 px-4 rounded-xl font-medium transition-colors"
              >
                ‚úèÔ∏è C·∫≠p nh·∫≠t
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Delete User Modal */}
      {deleteUserModal.open && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-2xl p-6 max-w-md w-full mx-4">
            <h3 className="text-xl font-bold text-gray-900 mb-4">üóëÔ∏è X√≥a user</h3>
            
            <div className="mb-6">
              <p className="text-gray-600 mb-2">B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a user n√†y?</p>
              <div className="bg-gray-50 p-4 rounded-lg">
                <p><strong>Email:</strong> {deleteUserModal.user?.email}</p>
                <p><strong>H·ªç t√™n:</strong> {deleteUserModal.user?.full_name || 'Ch∆∞a c√≥'}</p>
                <p><strong>Vai tr√≤:</strong> {deleteUserModal.user?.role}</p>
              </div>
              <p className="text-red-600 text-sm mt-2">‚ö†Ô∏è H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!</p>
            </div>
            
            <div className="flex gap-3">
              <button
                onClick={() => setDeleteUserModal({ open: false, user: null })}
                className="flex-1 bg-gray-500 hover:bg-gray-600 text-white py-3 px-4 rounded-xl font-medium transition-colors"
              >
                ‚ùå H·ªßy
              </button>
              <button
                onClick={handleDeleteUser}
                className="flex-1 bg-red-600 hover:bg-red-700 text-white py-3 px-4 rounded-xl font-medium transition-colors"
              >
                üóëÔ∏è X√≥a user
              </button>
            </div>
          </div>
        </div>
      )}
    </Layout>
  );
}

export default QuanLyUser;
