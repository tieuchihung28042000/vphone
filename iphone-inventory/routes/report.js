const express = require('express');
const router = express.Router();
const mongoose = require('mongoose'); // ‚úÖ Th√™m mongoose ƒë·ªÉ validate ObjectId
const Inventory = require('../models/Inventory');
const ExportHistory = require('../models/ExportHistory');
const { sendResetPasswordEmail } = require('../utils/mail');

// ==================== API: SUPER DEBUG - Test tr·ª±c ti·∫øp database ====================
router.get('/super-debug/:id', async (req, res) => {
  try {
    const id = req.params.id;
    console.log('üîç SUPER DEBUG for ID:', id);
    
    // Test trong Inventory
    const inventoryItem = await Inventory.findById(id);
    console.log('üì¶ Inventory result:', inventoryItem ? {
      _id: inventoryItem._id,
      product_name: inventoryItem.product_name,
      status: inventoryItem.status,
      price_sell: inventoryItem.price_sell,
      giaBan: inventoryItem.giaBan
    } : 'NOT FOUND');
    
    // Test trong ExportHistory  
    const exportItem = await ExportHistory.findById(id);
    console.log('üìã ExportHistory result:', exportItem ? {
      _id: exportItem._id,
      product_name: exportItem.product_name,
      price_sell: exportItem.price_sell
    } : 'NOT FOUND');
    
    // ƒê·∫øm records trong c·∫£ 2 collections
    const inventoryCount = await Inventory.countDocuments();
    const exportHistoryCount = await ExportHistory.countDocuments();
    const soldCount = await Inventory.countDocuments({ status: 'sold' });
    
    res.status(200).json({
      message: 'üîç SUPER DEBUG RESULTS',
      test_id: id,
      inventory_item: inventoryItem ? {
        found: true,
        _id: inventoryItem._id,
        product_name: inventoryItem.product_name,
        status: inventoryItem.status,
        price_sell: inventoryItem.price_sell,
        giaBan: inventoryItem.giaBan,
        customer_name: inventoryItem.customer_name
      } : { found: false },
      export_history_item: exportItem ? {
        found: true,
        _id: exportItem._id,
        product_name: exportItem.product_name,
        price_sell: exportItem.price_sell,
        customer_name: exportItem.customer_name
      } : { found: false },
      collections_stats: {
        total_inventory: inventoryCount,
        total_export_history: exportHistoryCount,
        inventory_sold: soldCount
      }
    });
  } catch (error) {
    console.error('‚ùå Super debug error:', error);
    res.status(500).json({ message: '‚ùå Super debug failed', error: error.message });
  }
});

// ==================== API: B√°o c√°o l·ª£i nhu·∫≠n c√≥ l·ªçc ====================
router.get('/bao-cao-loi-nhuan', async (req, res) => {
  try {
    const { from, to, branch } = req.query;

    const fromDate = new Date(from);
    const toDate = new Date(to);
    toDate.setDate(toDate.getDate() + 1); // Bao g·ªìm c·∫£ ng√†y cu·ªëi c√πng

    const query = {
      status: 'sold',
      sold_date: { $gte: fromDate, $lt: toDate }
    };

    if (branch && branch !== 'all') {
      query.branch = branch;
    }

    const soldItems = await Inventory.find(query);

    const totalDevicesSold = soldItems.length;
    // ∆Øu ti√™n field m·ªõi t·ª´ schema: price_sell v√† price_import
    const totalRevenue = soldItems.reduce(
      (sum, item) => sum + (item.price_sell || item.giaBan || 0), 0
    );
    const totalCost = soldItems.reduce(
      (sum, item) => sum + (item.price_import || item.giaNhap || 0), 0
    );
    const totalProfit = totalRevenue - totalCost;

    // Format orders ƒë·ªÉ ƒë·∫£m b·∫£o frontend hi·ªÉn th·ªã ƒë√∫ng
    const formattedOrders = soldItems.map(item => ({
      _id: item._id,
      imei: item.imei,
      sku: item.sku,
      tenSanPham: item.tenSanPham || item.product_name,
      product_name: item.product_name || item.tenSanPham,
      branch: item.branch,
      category: item.category,
      sold_date: item.sold_date,
      // Mapping c√°c field gi√° cho frontend (∆∞u ti√™n schema m·ªõi)
      import_price: item.price_import || item.giaNhap || 0,
      sale_price: item.price_sell || item.giaBan || 0,
      cost: item.price_import || item.giaNhap || 0,
      revenue: item.price_sell || item.giaBan || 0,
      // ƒê·∫£m b·∫£o mapping ng∆∞·ª£c l·∫°i cho backward compatibility
      price_import: item.price_import || item.giaNhap || 0,
      price_sell: item.price_sell || item.giaBan || 0,
      // Th√¥ng tin kh√°ch h√†ng (∆∞u ti√™n field m·ªõi t·ª´ schema)
      buyer_name: item.customer_name || "",
      buyer_phone: item.customer_phone || "",
      customer_name: item.customer_name || "",
      customer_phone: item.customer_phone || "",
      // Th√¥ng tin kh√°c
      warranty: item.warranty,
      note: item.note,
      debt: item.debt || 0,
      supplier: item.supplier
    }));

    res.status(200).json({
      message: '‚úÖ B√°o c√°o l·ª£i nhu·∫≠n',
      totalDevicesSold,
      totalRevenue,
      totalCost,
      totalProfit,
      orders: formattedOrders,
      items: formattedOrders // Backup field name
    });
  } catch (err) {
    console.error('‚ùå L·ªói khi l·∫•y b√°o c√°o l·ª£i nhu·∫≠n:', err);
    res.status(500).json({ message: '‚ùå L·ªói server khi l·∫•y b√°o c√°o' });
  }
});

// ==================== API: B√°o c√°o chi ti·∫øt ƒë∆°n h√†ng ƒë√£ b√°n ====================
router.get('/bao-cao-don-hang-chi-tiet', async (req, res) => {
  try {
    const { from, to, branch } = req.query;
    if (!from || !to) {
      return res.status(400).json({ message: "‚ùå Thi·∫øu tham s·ªë ng√†y" });
    }

    const fromDate = new Date(from);
    const toDate = new Date(to);
    toDate.setDate(toDate.getDate() + 1); // L·∫•y h·∫øt ng√†y "to"

    const query = {
      status: 'sold',
      sold_date: { $gte: fromDate, $lt: toDate }
    };
    if (branch && branch !== "all") {
      query.branch = branch;
    }

    const orders = await Inventory.find(query).sort({ sold_date: -1 });

    // Chu·∫©n h√≥a field cho frontend
    const result = orders.map(item => ({
      _id: item._id,
      sku: item.sku,
      product_name: item.product_name || item.tenSanPham,
      sold_date: item.sold_date,
      customer_name: item.customer_name || "Kh√°ch l·∫ª",
      customer_phone: item.customer_phone || "",
      price_import: item.price_import || item.giaNhap || 0,
      price_sell: item.price_sell || item.giaBan || 0
    }));

    res.status(200).json({
      message: "‚úÖ Danh s√°ch ƒë∆°n h√†ng chi ti·∫øt",
      orders: result
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng:", err);
    res.status(500).json({ message: "‚ùå L·ªói server khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng" });
  }
});

// ==================== API: L·∫•y danh s√°ch h√†ng ƒë√£ nh·∫≠p ====================
router.get('/nhap-hang', async (req, res) => {
  try {
    const { search = "", page = 1, limit = 20 } = req.query;
    const skip = (parseInt(page) - 1) * parseInt(limit);

    const query = {
      status: 'in_stock',
      $or: [
        { imei: { $regex: search, $options: 'i' } },
        { tenSanPham: { $regex: search, $options: 'i' } },
        { sku: { $regex: search, $options: 'i' } }
      ]
    };

    const total = await Inventory.countDocuments(query);
    const items = await Inventory.find(query)
      .sort({ import_date: -1 })
      .skip(skip)
      .limit(parseInt(limit));

    res.status(200).json({
      message: "‚úÖ Danh s√°ch h√†ng ƒë√£ nh·∫≠p",
      total,
      page: parseInt(page),
      limit: parseInt(limit),
      items
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch nh·∫≠p h√†ng:", error);
    res.status(500).json({ message: "‚ùå L·ªói server", error: error.message });
  }
});

// ==================== API: G·ª≠i email reset m·∫≠t kh·∫©u ====================
router.post('/send-reset-link', async (req, res) => {
  const { email } = req.body;

  if (!email) {
    return res.status(400).json({ message: '‚ùå Vui l√≤ng nh·∫≠p email' });
  }

  try {
    const resetLink = `http://localhost:5173/reset-mat-khau?email=${encodeURIComponent(email)}`;
    await sendResetPasswordEmail(email, resetLink);

    res.status(200).json({ message: '‚úÖ ƒê√£ g·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u' });
  } catch (err) {
    console.error('‚ùå G·ª≠i email l·ªói:', err.message);
    res.status(500).json({ message: '‚ùå G·ª≠i email th·∫•t b·∫°i', error: err.message });
  }
});
// API: C·∫£nh b√°o t·ªìn kho ph·ª• ki·ªán (g·ªôp m·ªói m√£ 1 d√≤ng)
router.get('/canh-bao-ton-kho', async (req, res) => {
  try {
    // L·∫•y to√†n b·ªô h√†ng ph·ª• ki·ªán (kh√¥ng c√≥ imei) c√≤n trong kho
    const accessories = await Inventory.find({
      status: 'in_stock',
      $or: [{ imei: null }, { imei: "" }],
    });

    // Gom nh√≥m theo SKU + chi nh√°nh
    const grouped = {};
    for (const item of accessories) {
      const key = (item.sku || "") + "|" + (item.branch || "");
      if (!grouped[key]) {
        grouped[key] = {
          sku: item.sku,
          tenSanPham: item.product_name || item.tenSanPham,
          branch: item.branch,
          totalRemain: 0,
        };
      }
      grouped[key].totalRemain += Number(item.quantity) || 0;
    }

    // L·ªçc ra ch·ªâ nh·ªØng s·∫£n ph·∫©m c√≥ t·ªìn kho < 2
    const items = Object.values(grouped).filter(row => row.totalRemain < 2);

    res.json({ items });
  } catch (err) {
    res.status(500).json({ message: "L·ªói truy v·∫•n c·∫£nh b√°o t·ªìn kho", error: err.message });
  }
});

// API: T√¨m s·∫£n ph·∫©m theo IMEI (b·∫•t k·ªÉ ƒë√£ b√°n hay ch∆∞a)
router.get('/find-by-imei', async (req, res) => {
  try {
    const { imei } = req.query;
    if (!imei) return res.status(400).json({ message: 'Thi·∫øu IMEI' });

    // T√¨m b·∫•t k·ª≥ s·∫£n ph·∫©m n√†o c√≥ IMEI n√†y, kh√¥ng c·∫ßn quan t√¢m status
    const product = await Inventory.findOne({ imei });
    if (!product) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y IMEI" });

    res.json(product);
  } catch (err) {
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
});

// ==================== API: Xu·∫•t h√†ng (iPhone & ph·ª• ki·ªán) ====================
router.post('/xuat-hang', async (req, res) => {
  try {
    const {
      imei,
      sku,
      product_name,
      quantity,
      warranty,
      sale_price,
      buyer_name,
      buyer_phone,
      branch,
      note,
      source,
      sale_date
    } = req.body;

    // Validation c∆° b·∫£n
    if (!sale_price || isNaN(sale_price) || sale_price <= 0) {
      return res.status(400).json({ message: "‚ùå Gi√° b√°n kh√¥ng h·ª£p l·ªá" });
    }

    if (imei && imei.toString().trim() !== "") {
      // ===== XU·∫§T iPHONE =====
      const item = await Inventory.findOneAndUpdate(
        { imei: imei.trim(), status: 'in_stock' },
        {
          $set: {
            status: 'sold',
            sold_date: sale_date ? new Date(sale_date) : new Date(),
            price_sell: parseFloat(sale_price),
            customer_name: buyer_name || "",
            customer_phone: buyer_phone || "",
            warranty: warranty || "",
            note: note || "",
            branch: branch || ""
          }
        },
        { new: true }
      );
      
      if (!item) {
        return res.status(404).json({ message: "‚ùå Kh√¥ng t√¨m th·∫•y m√°y trong kho ho·∫∑c ƒë√£ ƒë∆∞·ª£c b√°n" });
      }

      // ‚úÖ T·∫°o ExportHistory record cho iPhone
      await ExportHistory.create({
        imei: item.imei,
        sku: item.sku,
        product_name: item.product_name || item.tenSanPham,
        quantity: 1,
        price_import: item.price_import || 0,
        price_sell: parseFloat(sale_price) || 0,
        sold_date: sale_date ? new Date(sale_date) : new Date(),
        customer_name: buyer_name || '',
        customer_phone: buyer_phone || '',
        warranty: warranty || '',
        note: note || '',
        debt: 0,
        branch: branch || item.branch || '',
        category: item.category || '',
        export_type: 'iphone'
      });

      const profit = (parseFloat(sale_price) || 0) - (item.price_import || 0);
      return res.status(200).json({ 
        message: "‚úÖ Xu·∫•t m√°y th√†nh c√¥ng!", 
        profit, 
        item 
      });
    } else {
      // ===== XU·∫§T PH·ª§ KI·ªÜN =====
      if (!sku || !product_name) {
        return res.status(400).json({ message: "‚ùå Thi·∫øu SKU ho·∫∑c t√™n s·∫£n ph·∫©m" });
      }
      if (!quantity || quantity < 1) {
        return res.status(400).json({ message: "‚ùå S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá" });
      }

      // T√¨m ph·ª• ki·ªán c√≥ ƒë·ªß s·ªë l∆∞·ª£ng
      const accessory = await Inventory.findOne({
        sku,
        product_name,
        status: 'in_stock',
        $or: [{ imei: null }, { imei: "" }],
        quantity: { $gte: parseInt(quantity) }
      });

      if (!accessory) {
        return res.status(400).json({ message: `‚ùå Kh√¥ng ƒë·ªß ph·ª• ki·ªán trong kho` });
      }

      // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
      if (accessory.quantity > parseInt(quantity)) {
        // Gi·∫£m s·ªë l∆∞·ª£ng
        accessory.quantity -= parseInt(quantity);
        await accessory.save();
      } else if (accessory.quantity === parseInt(quantity)) {
        // H·∫øt h√†ng - set quantity = 0 nh∆∞ng gi·ªØ status in_stock
        accessory.quantity = 0;
        await accessory.save();
      }

      // ‚úÖ T·∫°o ExportHistory record cho ph·ª• ki·ªán
      await ExportHistory.create({
        imei: null, // Ph·ª• ki·ªán kh√¥ng c√≥ IMEI
        sku: accessory.sku,
        product_name: accessory.product_name || accessory.tenSanPham,
        quantity: parseInt(quantity),
        price_import: accessory.price_import || 0,
        price_sell: parseFloat(sale_price) || 0,
        sold_date: sale_date ? new Date(sale_date) : new Date(),
        customer_name: buyer_name || '',
        customer_phone: buyer_phone || '',
        warranty: warranty || '',
        note: note || '',
        debt: 0,
        branch: branch || accessory.branch || '',
        category: accessory.category || '',
        export_type: 'accessory'
      });

      const totalProfit = (parseFloat(sale_price) || 0) * parseInt(quantity) - (accessory.price_import || 0) * parseInt(quantity);
      
      return res.status(200).json({
        message: "‚úÖ Xu·∫•t ph·ª• ki·ªán th√†nh c√¥ng!",
        profit: totalProfit,
        quantity: parseInt(quantity)
      });
    }
  } catch (err) {
    console.error("‚ùå L·ªói xu·∫•t h√†ng:", err);
    res.status(500).json({ message: "‚ùå L·ªói server khi xu·∫•t h√†ng" });
  }
});

// ==================== API: L·∫•y danh s√°ch ƒë√£ xu·∫•t ====================
router.get('/xuat-hang-list', async (req, res) => {
  try {
    // ‚úÖ ROLLBACK: Query t·ª´ Inventory collection ƒë·ªÉ ƒë·∫£m b·∫£o nh·∫•t qu√°n
    const rawItems = await Inventory.find({ status: 'sold' }).sort({ sold_date: -1 });
    
    // Debug: Log m·ªôt sample ƒë·ªÉ check field
    if (rawItems.length > 0) {
      console.log('Sample sold item fields:', {
        price_sell: rawItems[0].price_sell,
        giaBan: rawItems[0].giaBan,
        all_keys: Object.keys(rawItems[0].toObject())
      });
    }
    
    // ‚úÖ Mapping field t·ª´ Inventory
    const items = rawItems.map(item => ({
      _id: item._id,
      sale_date: item.sold_date || item.createdAt,
      // ‚úÖ Gi√° b√°n - ∆∞u ti√™n price_sell, fallback giaBan, cu·ªëi c√πng sale_price
      sale_price: item.price_sell || item.giaBan || item.sale_price || 0,
      price_sell: item.price_sell || item.giaBan || 0, // Backup field
      buyer_name: item.customer_name || item.buyer_name || '',
      buyer_phone: item.customer_phone || item.buyer_phone || '',
      branch: item.branch || '',
      note: item.note || '',
      source: item.source || 'tien_mat',
      warranty: item.warranty || '',
      // ‚úÖ Th√™m c√°c field quan tr·ªçng kh√°c  
      price_import: item.price_import || item.giaNhap || 0,
      profit: (item.price_sell || item.giaBan || 0) - (item.price_import || item.giaNhap || 0),
      debt: item.debt || 0,
      imei: item.imei || '',
      sku: item.sku || '',
      product_name: item.product_name || item.tenSanPham || '',
      customer_name: item.customer_name || '',
      customer_phone: item.customer_phone || '',
      item: {
        _id: item._id,
        product_name: item.product_name || item.tenSanPham,
        tenSanPham: item.tenSanPham || item.product_name,
        imei: item.imei || '',
        sku: item.sku || '',
        category: item.category || '',
      }
    }));
    
    res.status(200).json({ 
      message: '‚úÖ Danh s√°ch xu·∫•t h√†ng',
      total: items.length,
      items 
    });
  } catch (error) {
    console.error('‚ùå L·ªói API xuat-hang-list:', error);
    res.status(500).json({ message: '‚ùå L·ªói l·∫•y danh s√°ch xu·∫•t h√†ng', error: error.message });
  }
});

// ==================== API: C·∫≠p nh·∫≠t ƒë∆°n xu·∫•t ====================
router.put('/xuat-hang/:id', async (req, res) => {
  try {
    const {
      imei,
      sku,
      product_name,
      sale_price,
      buyer_name,
      buyer_phone,
      warranty,
      note,
      branch,
      sale_date,
      source,
      debt
    } = req.body;

    console.log('PUT Request data:', req.body); // Debug

    // ‚úÖ ROLLBACK: Proper field mapping ƒë·ªÉ consistent v·ªõi POST API tr√™n Inventory
    const updateFields = {
      status: 'sold',
      // Price fields - map to both formats for consistency
      price_sell: parseFloat(sale_price) || 0,
      giaBan: parseFloat(sale_price) || 0,
      // Customer info
      customer_name: buyer_name || '',
      customer_phone: buyer_phone || '',
      // Product info  
      product_name: product_name || '',
      sku: sku || '',
      imei: imei || '',
      // Other fields
      warranty: warranty || '',
      note: note || '',
      branch: branch || '',
      source: source || 'tien_mat',
      sold_date: sale_date ? new Date(sale_date) : new Date(),
      debt: parseFloat(debt) || 0,
      // Update timestamp
      updatedAt: new Date()
    };

    // Remove undefined/empty fields
    Object.keys(updateFields).forEach(key => {
      if (updateFields[key] === undefined || updateFields[key] === '') {
        delete updateFields[key];
      }
    });

    console.log('Processed update fields for Inventory:', updateFields); // Debug

    // ‚úÖ Debug: Ki·ªÉm tra record c√≥ t·ªìn t·∫°i kh√¥ng (b·∫•t k·ªÉ status)
    const existingRecord = await Inventory.findById(req.params.id);
    console.log('üîç Found record for PUT:', existingRecord ? existingRecord.product_name : 'NOT FOUND');
    console.log('üîç Record status:', existingRecord ? existingRecord.status : 'N/A');
    
    const updated = await Inventory.findByIdAndUpdate(
      req.params.id, 
      { $set: updateFields }, 
      { new: true, runValidators: true }
    );
    
    if (!updated) {
      return res.status(404).json({ message: '‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n xu·∫•t ƒë·ªÉ c·∫≠p nh·∫≠t.' });
    }

    console.log('Updated item price fields:', updated.price_sell, updated.giaBan); // Debug

    res.status(200).json({ 
      message: '‚úÖ ƒê√£ c·∫≠p nh·∫≠t ƒë∆°n xu·∫•t th√†nh c√¥ng!', 
      item: updated 
    });
  } catch (error) {
    console.error('‚ùå Error updating xuat-hang:', error);
    res.status(500).json({ message: '‚ùå L·ªói khi c·∫≠p nh·∫≠t ƒë∆°n xu·∫•t', error: error.message });
  }
});

// ==================== API: X√≥a ƒë∆°n xu·∫•t (tr·∫£ h√†ng v·ªÅ kho) ====================
router.delete('/xuat-hang/:id', async (req, res) => {
  try {
    // ‚úÖ ROLLBACK: D√πng logic ƒë∆°n gi·∫£n v·ªõi Inventory collection
    const item = await Inventory.findById(req.params.id);
    if (!item || item.status !== 'sold') {
      return res.status(404).json({ message: '‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n xu·∫•t h√†ng.' });
    }

    // ‚úÖ Tr·∫£ v·ªÅ tr·∫°ng th√°i in_stock v√† x√≥a th√¥ng tin b√°n h√†ng
    item.status = 'in_stock';
    item.giaBan = undefined;
    item.price_sell = undefined;
    item.sold_date = undefined;
    item.customer_name = undefined;
    item.customer_phone = undefined;
    item.warranty = undefined;
    item.note = undefined;
    item.debt = 0;
    item.da_tra = 0;

    await item.save();

    res.status(200).json({ message: '‚úÖ ƒê√£ chuy·ªÉn m√°y v·ªÅ t·ªìn kho!', item });
  } catch (error) {
    console.error('‚ùå Error deleting export record:', error);
    res.status(500).json({ message: '‚ùå L·ªói khi xo√° ƒë∆°n xu·∫•t', error: error.message });
  }
});

// ==================== API: DEBUG - Ki·ªÉm tra record ====================
router.get('/debug-record/:id', async (req, res) => {
  try {
    const item = await Inventory.findById(req.params.id);
    if (!item) {
      return res.status(404).json({ message: '‚ùå Kh√¥ng t√¨m th·∫•y record.' });
    }
    
    res.status(200).json({ 
      message: '‚úÖ Th√¥ng tin record',
      item: {
        _id: item._id,
        status: item.status,
        imei: item.imei,
        product_name: item.product_name,
        price_sell: item.price_sell,
        giaBan: item.giaBan,
        customer_name: item.customer_name,
        all_fields: Object.keys(item.toObject())
      }
    });
  } catch (error) {
    res.status(500).json({ message: '‚ùå L·ªói debug', error: error.message });
  }
});

// ==================== API: TEST - Ki·ªÉm tra Inventory collection ====================
router.get('/test-inventory', async (req, res) => {
  try {
    const totalInventory = await Inventory.countDocuments();
    const soldItems = await Inventory.countDocuments({ status: 'sold' });
    const recentSold = await Inventory.find({ status: 'sold' }).limit(3).sort({ sold_date: -1 });
    
    res.status(200).json({ 
      message: '‚úÖ Th·ªëng k√™ Inventory collection',
      total_inventory: totalInventory,
      sold_items: soldItems,
      recent_sold_samples: recentSold.map(item => ({
        _id: item._id,
        product_name: item.product_name,
        status: item.status,
        imei: item.imei || 'N/A'
      }))
    });
  } catch (error) {
    res.status(500).json({ message: '‚ùå L·ªói test', error: error.message });
  }
});

// ==================== API: Migration data t·ª´ Inventory c≈© sang ExportHistory ====================
router.post('/migrate-export-history', async (req, res) => {
  try {
    console.log('üîÑ Starting migration from Inventory to ExportHistory...');
    
    // L·∫•y t·∫•t c·∫£ records ƒë√£ b√°n t·ª´ Inventory m√† ch∆∞a c√≥ trong ExportHistory
    const soldInventoryItems = await Inventory.find({ status: 'sold' });
    console.log(`üìã Found ${soldInventoryItems.length} sold items in Inventory`);
    
    let migratedCount = 0;
    
    for (const item of soldInventoryItems) {
      // Ki·ªÉm tra xem ƒë√£ c√≥ trong ExportHistory ch∆∞a
      const existingExport = await ExportHistory.findOne({
        imei: item.imei || null,
        sku: item.sku,
        product_name: item.product_name || item.tenSanPham,
        sold_date: item.sold_date
      });
      
      if (!existingExport) {
        // T·∫°o record m·ªõi trong ExportHistory
        await ExportHistory.create({
          imei: item.imei || '',
          sku: item.sku || '',
          product_name: item.product_name || item.tenSanPham || '',
          quantity: 1, // iPhone lu√¥n l√† 1
          price_import: item.price_import || 0,
          price_sell: item.price_sell || item.giaBan || 0,
          sold_date: item.sold_date || item.createdAt || new Date(),
          customer_name: item.customer_name || '',
          customer_phone: item.customer_phone || '',
          warranty: item.warranty || '',
          note: item.note || '',
          debt: item.debt || 0,
          branch: item.branch || '',
          category: item.category || '',
          export_type: item.imei ? 'normal' : 'accessory'
        });
        
        migratedCount++;
        console.log(`‚úÖ Migrated: ${item.product_name || item.tenSanPham} (${item.imei || item.sku})`);
      }
    }
    
    console.log(`üéâ Migration completed: ${migratedCount} records migrated`);
    res.status(200).json({ 
      message: `‚úÖ Migration th√†nh c√¥ng! ƒê√£ chuy·ªÉn ${migratedCount} records t·ª´ Inventory sang ExportHistory.`,
      migratedCount,
      totalSoldInventory: soldInventoryItems.length
    });
  } catch (error) {
    console.error('‚ùå Migration error:', error);
    res.status(500).json({ message: '‚ùå L·ªói khi migration d·ªØ li·ªáu', error: error.message });
  }
});

// API l·∫•y chi ti·∫øt th√¥ng tin IMEI (cho modal t·ªìn kho)
router.get('/imei-detail/:imei', async (req, res) => {
  try {
    const { imei } = req.params;
    
    if (!imei) {
      return res.status(400).json({ message: "IMEI kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });
    }

    const item = await Inventory.findOne({ imei: imei });
    
    if (!item) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi IMEI n√†y" });
    }

    const detail = {
      imei: item.imei,
      product_name: item.product_name || item.tenSanPham,
      sku: item.sku,
      price_import: item.price_import,
      import_date: item.import_date,
      branch: item.branch,
      supplier: item.supplier,
      category: item.category,
      status: item.status,
      imported_by: item.imported_by || 'Kh√¥ng r√µ',
      // Th√¥ng tin b√°n h√†ng (n·∫øu ƒë√£ b√°n)
      price_sell: item.price_sell,
      sold_date: item.sold_date,
      customer_name: item.customer_name,
      profit: item.price_sell ? (item.price_sell - item.price_import) : null
    };

    res.json({ item: detail });
  } catch (err) {
    res.status(500).json({ message: '‚ùå L·ªói server khi l·∫•y chi ti·∫øt IMEI', error: err.message });
  }
});

module.exports = router;
