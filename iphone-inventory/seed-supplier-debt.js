const mongoose = require('mongoose');
require('dotenv').config();

// Import models
const Inventory = require('./models/Inventory');

const seedSupplierDebt = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/vphone');
    console.log('‚úÖ Connected to MongoDB');

    // Create test supplier debt data
    const supplierDebtData = [
      {
        imei: "354321098765432",
        sku: "IP14PM-256-PUR", 
        product_name: "iPhone 14 Pro Max 256GB Purple",
        price_import: 28000000,
        import_date: new Date('2024-01-15'),
        supplier: "Th·∫ø Gi·ªõi Di ƒê·ªông",
        branch: "Dƒ© An",
        note: "Nh·∫≠p h√†ng ƒë·ª£t 1",
        quantity: 1,
        category: "iPhone",
        status: "in_stock",
        // Supplier debt fields
        supplier_debt: 5000000, // C√≤n n·ª£ 5 tri·ªáu
        supplier_da_tra: 23000000, // ƒê√£ tr·∫£ 23 tri·ªáu
        supplier_debt_history: [
          {
            type: "add",
            amount: 28000000,
            date: new Date('2024-01-15'),
            note: "Nh·∫≠p h√†ng iPhone 14 Pro Max"
          },
          {
            type: "pay", 
            amount: 15000000,
            date: new Date('2024-01-20'),
            note: "Tr·∫£ n·ª£ ƒë·ª£t 1"
          },
          {
            type: "pay",
            amount: 8000000, 
            date: new Date('2024-01-25'),
            note: "Tr·∫£ n·ª£ ƒë·ª£t 2"
          }
        ]
      },
      {
        imei: "456789123456789",
        sku: "IP13-128-BLU",
        product_name: "iPhone 13 128GB Blue", 
        price_import: 20000000,
        import_date: new Date('2024-01-10'),
        supplier: "FPT Shop",
        branch: "Qu·∫≠n 9", 
        note: "Nh·∫≠p h√†ng iPhone 13",
        quantity: 1,
        category: "iPhone",
        status: "in_stock",
        // Supplier debt fields
        supplier_debt: 20000000, // Ch∆∞a tr·∫£ g√¨
        supplier_da_tra: 0,
        supplier_debt_history: [
          {
            type: "add",
            amount: 20000000,
            date: new Date('2024-01-10'),
            note: "Nh·∫≠p h√†ng iPhone 13 - ch∆∞a thanh to√°n"
          }
        ]
      },
      {
        sku: "CASE-IP14-SIL",
        product_name: "·ªêp l∆∞ng iPhone 14 Silicon",
        price_import: 50000,
        import_date: new Date('2024-01-20'),
        supplier: "Ph·ª• Ki·ªán S√†i G√≤n",
        branch: "Dƒ© An",
        note: "Nh·∫≠p ph·ª• ki·ªán",
        quantity: 20,
        category: "Ph·ª• ki·ªán", 
        status: "in_stock",
        // Supplier debt fields
        supplier_debt: 800000, // C√≤n n·ª£ 800k
        supplier_da_tra: 200000, // ƒê√£ tr·∫£ 200k
        supplier_debt_history: [
          {
            type: "add", 
            amount: 1000000,
            date: new Date('2024-01-20'),
            note: "Nh·∫≠p 20 ·ªëp l∆∞ng iPhone 14"
          },
          {
            type: "pay",
            amount: 200000,
            date: new Date('2024-01-22'),
            note: "Tr·∫£ n·ª£ m·ªôt ph·∫ßn"
          }
        ]
      }
    ];

    // Delete existing test data
    await Inventory.deleteMany({ 
      supplier: { $in: ["Th·∫ø Gi·ªõi Di ƒê·ªông", "FPT Shop", "Ph·ª• Ki·ªán S√†i G√≤n"] }
    });
    
    console.log('üóëÔ∏è Deleted existing test data');

    // Insert new test data
    const created = await Inventory.insertMany(supplierDebtData);
    console.log(`‚úÖ Created ${created.length} supplier debt test records`);

    console.log('\nüìä Test Data Summary:');
    console.log('- Th·∫ø Gi·ªõi Di ƒê·ªông: iPhone 14 Pro Max (c√≤n n·ª£ 5 tri·ªáu)');
    console.log('- FPT Shop: iPhone 13 (ch∆∞a tr·∫£ g√¨, n·ª£ 20 tri·ªáu)'); 
    console.log('- Ph·ª• Ki·ªán S√†i G√≤n: ·ªêp l∆∞ng (c√≤n n·ª£ 800k)');
    console.log('\nüéØ B√¢y gi·ªù c√≥ th·ªÉ test t√≠nh nƒÉng "M√¨nh n·ª£ nh√† cung c·∫•p"!');

  } catch (error) {
    console.error('‚ùå Error seeding supplier debt data:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üëã Disconnected from MongoDB');
  }
};

// Run the seed
seedSupplierDebt(); 