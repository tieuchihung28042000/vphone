const mongoose = require('mongoose');
const bcrypt = require('bcrypt');

// Connection string
const MONGODB_URI = 'mongodb://vphone_admin:vphone_secure_2024@103.109.187.224:27017/test?authSource=admin';

// Import models
const Admin = require('./models/Admin');
const User = require('./models/User');
const Branch = require('./models/Branch');
const Category = require('./models/Category');
const Inventory = require('./models/Inventory');
const Cashbook = require('./models/Cashbook');
const Debt = require('./models/Debt');
const SupplierDebt = require('./models/SupplierDebt');

async function importTestData() {
  try {
    console.log('üöÄ B·∫Øt ƒë·∫ßu import d·ªØ li·ªáu test...');
    console.log('üîó K·∫øt n·ªëi:', MONGODB_URI.replace(/:[^:@]*@/, ':***@'));
    
    // K·∫øt n·ªëi database
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ K·∫øt n·ªëi database test th√†nh c√¥ng');

    // X√≥a d·ªØ li·ªáu c≈©
    console.log('üóëÔ∏è X√≥a d·ªØ li·ªáu c≈©...');
    await Promise.all([
      Admin.deleteMany({}),
      User.deleteMany({}),
      Branch.deleteMany({}),
      Category.deleteMany({}),
      Inventory.deleteMany({}),
      Cashbook.deleteMany({}),
      Debt.deleteMany({}),
      SupplierDebt.deleteMany({})
    ]);
    console.log('‚úÖ ƒê√£ x√≥a d·ªØ li·ªáu c≈©');

    // 1. T·∫°o Admin accounts
    console.log('üë§ T·∫°o t√†i kho·∫£n Admin...');
    const adminData = [
      {
        username: 'admin',
        email: 'admin@test.vphone.vn',
        password: await bcrypt.hash('admin123', 10),
        role: 'admin',
        isApproved: true
      },
      {
        username: 'superadmin',
        email: 'superadmin@test.vphone.vn',
        password: await bcrypt.hash('super123', 10),
        role: 'admin',
        isApproved: true
      }
    ];
    
    const admins = await Admin.insertMany(adminData);
    console.log(`‚úÖ ƒê√£ t·∫°o ${admins.length} t√†i kho·∫£n admin`);

    // 2. T·∫°o User accounts
    console.log('üë• T·∫°o t√†i kho·∫£n User...');
    const userData = [
      {
        username: 'testuser',
        email: 'user@test.vphone.vn',
        password: await bcrypt.hash('user123', 10),
        role: 'user',
        isApproved: true
      },
      {
        username: 'saleuser',
        email: 'sale@test.vphone.vn',
        password: await bcrypt.hash('sale123', 10),
        role: 'user',
        isApproved: true
      }
    ];
    
    const users = await User.insertMany(userData);
    console.log(`‚úÖ ƒê√£ t·∫°o ${users.length} t√†i kho·∫£n user`);

    // 3. T·∫°o Chi nh√°nh
    console.log('üè¢ T·∫°o chi nh√°nh...');
    const branchData = [
      {
        name: 'VPhone Test Qu·∫≠n 1',
        address: '123 Nguy·ªÖn Hu·ªá, Qu·∫≠n 1, TP.HCM',
        phone: '0901234567',
        manager: 'Nguy·ªÖn VƒÉn A',
        email: 'q1@test.vphone.vn'
      },
      {
        name: 'VPhone Test Qu·∫≠n 3',
        address: '456 V√µ VƒÉn T·∫ßn, Qu·∫≠n 3, TP.HCM',
        phone: '0901234568',
        manager: 'Tr·∫ßn Th·ªã B',
        email: 'q3@test.vphone.vn'
      },
      {
        name: 'VPhone Test H√† N·ªôi',
        address: '789 Ho√†ng Ki·∫øm, H√† N·ªôi',
        phone: '0901234569',
        manager: 'L√™ VƒÉn C',
        email: 'hn@test.vphone.vn'
      }
    ];
    
    const branches = await Branch.insertMany(branchData);
    console.log(`‚úÖ ƒê√£ t·∫°o ${branches.length} chi nh√°nh`);

    // 4. T·∫°o Danh m·ª•c s·∫£n ph·∫©m
    console.log('üì± T·∫°o danh m·ª•c s·∫£n ph·∫©m...');
    const categoryData = [
      {
        name: 'iPhone 15 Series',
        description: 'iPhone 15, 15 Plus, 15 Pro, 15 Pro Max',
        isActive: true
      },
      {
        name: 'iPhone 14 Series',
        description: 'iPhone 14, 14 Plus, 14 Pro, 14 Pro Max',
        isActive: true
      },
      {
        name: 'iPhone 13 Series',
        description: 'iPhone 13, 13 Mini, 13 Pro, 13 Pro Max',
        isActive: true
      },
      {
        name: 'MacBook',
        description: 'MacBook Air, MacBook Pro c√°c lo·∫°i',
        isActive: true
      },
      {
        name: 'iPad',
        description: 'iPad, iPad Air, iPad Pro, iPad Mini',
        isActive: true
      },
      {
        name: 'Apple Watch',
        description: 'Apple Watch Series v√† SE',
        isActive: true
      },
      {
        name: 'Ph·ª• ki·ªán',
        description: '·ªêp l∆∞ng, c√°p s·∫°c, tai nghe',
        isActive: true
      }
    ];
    
    const categories = await Category.insertMany(categoryData);
    console.log(`‚úÖ ƒê√£ t·∫°o ${categories.length} danh m·ª•c`);

    // 5. T·∫°o Inventory (Kho h√†ng)
    console.log('üì¶ T·∫°o d·ªØ li·ªáu kho h√†ng...');
    const currentTime = Date.now();
    const inventoryData = [
      // iPhone 15 Pro Max
      {
        imei: `TEST${currentTime}001`,
        sku: 'IP15PM-256-NT',
        product_name: 'iPhone 15 Pro Max 256GB Natural Titanium',
        tenSanPham: 'iPhone 15 Pro Max 256GB Natural Titanium',
        price_import: 28000000,
        price_sell: 32000000,
        giaBan: 32000000,
        import_date: new Date(),
        supplier: 'Apple Authorized Distributor',
        branch: branches[0]._id,
        category: categories[0]._id,
        quantity: 1,
        status: 'available',
        note: 'H√†ng ch√≠nh h√£ng VN/A',
        da_thanh_toan_nhap: 28000000
      },
      {
        imei: `TEST${currentTime}002`,
        sku: 'IP15PM-512-BT',
        product_name: 'iPhone 15 Pro Max 512GB Blue Titanium',
        tenSanPham: 'iPhone 15 Pro Max 512GB Blue Titanium',
        price_import: 35000000,
        price_sell: 39000000,
        giaBan: 39000000,
        import_date: new Date(),
        supplier: 'Apple Authorized Distributor',
        branch: branches[0]._id,
        category: categories[0]._id,
        quantity: 1,
        status: 'sold',
        note: 'ƒê√£ b√°n cho kh√°ch VIP',
        da_thanh_toan_nhap: 35000000
      },
      // iPhone 15 Pro
      {
        imei: `TEST${currentTime}003`,
        sku: 'IP15P-128-BT',
        product_name: 'iPhone 15 Pro 128GB Blue Titanium',
        tenSanPham: 'iPhone 15 Pro 128GB Blue Titanium',
        price_import: 25000000,
        price_sell: 29000000,
        giaBan: 29000000,
        import_date: new Date(),
        supplier: 'Apple Authorized Distributor',
        branch: branches[1]._id,
        category: categories[0]._id,
        quantity: 1,
        status: 'available',
        note: 'H√†ng m·ªõi v·ªÅ',
        da_thanh_toan_nhap: 25000000
      },
      {
        imei: `TEST${currentTime}004`,
        sku: 'IP15P-256-WT',
        product_name: 'iPhone 15 Pro 256GB White Titanium',
        tenSanPham: 'iPhone 15 Pro 256GB White Titanium',
        price_import: 27000000,
        price_sell: 31000000,
        giaBan: 31000000,
        import_date: new Date(),
        supplier: 'Apple Authorized Distributor',
        branch: branches[1]._id,
        category: categories[0]._id,
        quantity: 1,
        status: 'available',
        note: 'M√†u hot',
        da_thanh_toan_nhap: 27000000
      },
      // iPhone 15
      {
        imei: `TEST${currentTime}005`,
        sku: 'IP15-128-PK',
        product_name: 'iPhone 15 128GB Pink',
        tenSanPham: 'iPhone 15 128GB Pink',
        price_import: 20000000,
        price_sell: 24000000,
        giaBan: 24000000,
        import_date: new Date(),
        supplier: 'Apple Authorized Distributor',
        branch: branches[2]._id,
        category: categories[0]._id,
        quantity: 1,
        status: 'available',
        note: 'M√†u h·ªìng hot v·ªõi n·ªØ',
        da_thanh_toan_nhap: 20000000
      },
      // MacBook
      {
        imei: `TEST${currentTime}006`,
        sku: 'MBA-M3-15-256',
        product_name: 'MacBook Air M3 15inch 256GB Space Gray',
        tenSanPham: 'MacBook Air M3 15inch 256GB Space Gray',
        price_import: 30000000,
        price_sell: 35000000,
        giaBan: 35000000,
        import_date: new Date(),
        supplier: 'Apple Authorized Distributor',
        branch: branches[0]._id,
        category: categories[3]._id,
        quantity: 1,
        status: 'sold',
        note: 'B√°n cho doanh nghi·ªáp',
        da_thanh_toan_nhap: 30000000
      },
      // iPad
      {
        imei: `TEST${currentTime}007`,
        sku: 'IPP-M2-129-256',
        product_name: 'iPad Pro 12.9 M2 256GB WiFi Space Gray',
        tenSanPham: 'iPad Pro 12.9 M2 256GB WiFi Space Gray',
        price_import: 22000000,
        price_sell: 26000000,
        giaBan: 26000000,
        import_date: new Date(),
        supplier: 'Apple Authorized Distributor',
        branch: branches[1]._id,
        category: categories[4]._id,
        quantity: 1,
        status: 'available',
        note: 'Ph√π h·ª£p cho designer',
        da_thanh_toan_nhap: 22000000
      },
      // Apple Watch
      {
        imei: `TEST${currentTime}008`,
        sku: 'AWS9-45-GPS',
        product_name: 'Apple Watch Series 9 45mm GPS Midnight',
        tenSanPham: 'Apple Watch Series 9 45mm GPS Midnight',
        price_import: 8000000,
        price_sell: 10000000,
        giaBan: 10000000,
        import_date: new Date(),
        supplier: 'Apple Authorized Distributor',
        branch: branches[2]._id,
        category: categories[5]._id,
        quantity: 1,
        status: 'available',
        note: 'ƒê·ªìng h·ªì th√¥ng minh hot nh·∫•t',
        da_thanh_toan_nhap: 8000000
      }
    ];
    
    const inventory = await Inventory.insertMany(inventoryData);
    console.log(`‚úÖ ƒê√£ t·∫°o ${inventory.length} s·∫£n ph·∫©m trong kho`);

    // 6. T·∫°o Cashbook (S·ªï qu·ªπ)
    console.log('üí∞ T·∫°o d·ªØ li·ªáu s·ªï qu·ªπ...');
    const cashbookData = [
      {
        date: new Date(),
        type: 'thu',
        amount: 39000000,
        description: 'B√°n iPhone 15 Pro Max 512GB Blue Titanium',
        category: 'ban_hang',
        source: 'tien_mat',
        branch: branches[0]._id,
        reference: inventory[1]._id
      },
      {
        date: new Date(),
        type: 'chi',
        amount: 35000000,
        description: 'Nh·∫≠p iPhone 15 Pro Max 512GB Blue Titanium',
        category: 'nhap_hang',
        source: 'tien_mat',
        branch: branches[0]._id,
        reference: inventory[1]._id
      },
      {
        date: new Date(),
        type: 'thu',
        amount: 35000000,
        description: 'B√°n MacBook Air M3 15inch cho c√¥ng ty',
        category: 'ban_hang',
        source: 'chuyen_khoan',
        branch: branches[0]._id,
        reference: inventory[5]._id
      },
      {
        date: new Date(),
        type: 'chi',
        amount: 30000000,
        description: 'Nh·∫≠p MacBook Air M3 15inch',
        category: 'nhap_hang',
        source: 'chuyen_khoan',
        branch: branches[0]._id,
        reference: inventory[5]._id
      },
      {
        date: new Date(),
        type: 'chi',
        amount: 2000000,
        description: 'Chi ph√≠ v·∫≠n chuy·ªÉn h√†ng t·ª´ HN v·ªÅ HCM',
        category: 'van_chuyen',
        source: 'tien_mat',
        branch: branches[0]._id
      },
      {
        date: new Date(),
        type: 'chi',
        amount: 5000000,
        description: 'L∆∞∆°ng nh√¢n vi√™n th√°ng n√†y',
        category: 'luong',
        source: 'chuyen_khoan',
        branch: branches[0]._id
      }
    ];
    
    const cashbook = await Cashbook.insertMany(cashbookData);
    console.log(`‚úÖ ƒê√£ t·∫°o ${cashbook.length} giao d·ªãch s·ªï qu·ªπ`);

    // 7. T·∫°o Debt (C√¥ng n·ª£ kh√°ch h√†ng)
    console.log('üìã T·∫°o d·ªØ li·ªáu c√¥ng n·ª£ kh√°ch h√†ng...');
    const debtData = [
      {
        customerName: 'Nguy·ªÖn VƒÉn Kh√°ch',
        customerPhone: '0987654321',
        customerEmail: 'khach@gmail.com',
        totalAmount: 32000000,
        paidAmount: 20000000,
        remainingAmount: 12000000,
        description: 'Mua iPhone 15 Pro Max tr·∫£ g√≥p',
        dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 ng√†y
        status: 'pending',
        branch: branches[0]._id,
        createdBy: users[0]._id
      },
      {
        customerName: 'Tr·∫ßn Th·ªã Mua',
        customerPhone: '0987654322',
        customerEmail: 'mua@gmail.com',
        totalAmount: 26000000,
        paidAmount: 26000000,
        remainingAmount: 0,
        description: 'Mua iPad Pro ƒë√£ thanh to√°n ƒë·ªß',
        dueDate: new Date(),
        status: 'paid',
        branch: branches[1]._id,
        createdBy: users[1]._id
      }
    ];
    
    const debts = await Debt.insertMany(debtData);
    console.log(`‚úÖ ƒê√£ t·∫°o ${debts.length} c√¥ng n·ª£ kh√°ch h√†ng`);

    // 8. T·∫°o SupplierDebt (C√¥ng n·ª£ nh√† cung c·∫•p)
    console.log('üè≠ T·∫°o d·ªØ li·ªáu c√¥ng n·ª£ nh√† cung c·∫•p...');
    const supplierDebtData = [
      {
        supplierName: 'Apple Authorized Distributor',
        supplierPhone: '0901111111',
        supplierEmail: 'contact@appledist.vn',
        totalAmount: 150000000,
        paidAmount: 100000000,
        remainingAmount: 50000000,
        description: 'Nh·∫≠p l√¥ h√†ng iPhone 15 series',
        dueDate: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000), // 15 ng√†y
        status: 'pending',
        branch: branches[0]._id,
        createdBy: admins[0]._id
      },
      {
        supplierName: 'Ph·ª• Ki·ªán Vi·ªát Nam',
        supplierPhone: '0902222222',
        supplierEmail: 'info@phukienvn.com',
        totalAmount: 5000000,
        paidAmount: 5000000,
        remainingAmount: 0,
        description: 'Nh·∫≠p ·ªëp l∆∞ng v√† c√°p s·∫°c',
        dueDate: new Date(),
        status: 'paid',
        branch: branches[1]._id,
        createdBy: admins[1]._id
      }
    ];
    
    const supplierDebts = await SupplierDebt.insertMany(supplierDebtData);
    console.log(`‚úÖ ƒê√£ t·∫°o ${supplierDebts.length} c√¥ng n·ª£ nh√† cung c·∫•p`);

    // Th·ªëng k√™ t·ªïng k·∫øt
    console.log('\nüéâ IMPORT D·ªÆ LI·ªÜU TEST TH√ÄNH C√îNG!');
    console.log('üìä T·ªïng k·∫øt d·ªØ li·ªáu ƒë√£ import:');
    console.log(`   üë§ Admin: ${admins.length} t√†i kho·∫£n`);
    console.log(`   üë• User: ${users.length} t√†i kho·∫£n`);
    console.log(`   üè¢ Chi nh√°nh: ${branches.length} chi nh√°nh`);
    console.log(`   üì± Danh m·ª•c: ${categories.length} danh m·ª•c`);
    console.log(`   üì¶ Kho h√†ng: ${inventory.length} s·∫£n ph·∫©m`);
    console.log(`   üí∞ S·ªï qu·ªπ: ${cashbook.length} giao d·ªãch`);
    console.log(`   üìã C√¥ng n·ª£ KH: ${debts.length} kho·∫£n`);
    console.log(`   üè≠ C√¥ng n·ª£ NCC: ${supplierDebts.length} kho·∫£n`);
    
    console.log('\nüîë Th√¥ng tin ƒëƒÉng nh·∫≠p:');
    console.log('   üëë Admin: admin / admin123');
    console.log('   üëë Super Admin: superadmin / super123');
    console.log('   üë§ User: testuser / user123');
    console.log('   üë§ Sale User: saleuser / sale123');
    
    console.log('\nüîó Database Connection:');
    console.log('   mongodb://vphone_admin:***@103.109.187.224:27017/test?authSource=admin');

  } catch (error) {
    console.error('‚ùå L·ªói import d·ªØ li·ªáu:', error);
    console.error('Stack trace:', error.stack);
  } finally {
    await mongoose.disconnect();
    console.log('üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi database');
    process.exit(0);
  }
}

// Ch·∫°y import
console.log('üöÄ B·∫Øt ƒë·∫ßu import d·ªØ li·ªáu test environment');
console.log('üìÖ Th·ªùi gian:', new Date().toLocaleString('vi-VN'));
importTestData(); 