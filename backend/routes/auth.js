const express = require('express');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const mongoose = require('mongoose');
const User = require('../models/User');
const nodemailer = require('nodemailer');

const router = express.Router();

// ===== ƒêƒÉng k√Ω t√†i kho·∫£n user =====
router.post('/register', async (req, res) => {
  try {
    console.log('üîß [REGISTER] Received registration request:', req.body);
    const { email, password, username, role, branch_id, branch_name, full_name, phone } = req.body;

    if (!email || !password) {
      return res.status(400).json({ message: '‚ùå Email v√† m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc' });
    }

    // Ki·ªÉm tra vai tr√≤ h·ª£p l·ªá
    const validRoles = ['user', 'admin', 'thu_ngan', 'quan_ly', 'nhan_vien_ban_hang'];
    if (role && !validRoles.includes(role)) {
      return res.status(400).json({ message: '‚ùå Vai tr√≤ kh√¥ng h·ª£p l·ªá' });
    }

    // Ki·ªÉm tra branch_id cho c√°c vai tr√≤ kh√¥ng ph·∫£i admin
    if (role && role !== 'admin' && !branch_id) {
      return res.status(400).json({ message: '‚ùå Chi nh√°nh l√† b·∫Øt bu·ªôc cho vai tr√≤ n√†y' });
    }

    // Ki·ªÉm tra branch_id c√≥ ph·∫£i ObjectId h·ª£p l·ªá kh√¥ng
    if (branch_id && !mongoose.Types.ObjectId.isValid(branch_id)) {
      return res.status(400).json({ message: '‚ùå ID chi nh√°nh kh√¥ng h·ª£p l·ªá' });
    }

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
    const existingEmail = await User.findOne({ email });
    if (existingEmail) {
      return res.status(400).json({ message: '‚ùå Email ƒë√£ t·ªìn t·∫°i' });
    }

    // Ki·ªÉm tra username ƒë√£ t·ªìn t·∫°i (n·∫øu c√≥)
    if (username) {
      const existingUsername = await User.findOne({ username });
      if (existingUsername) {
        return res.status(400).json({ message: '‚ùå Username ƒë√£ t·ªìn t·∫°i' });
      }
    }

    const hashed = await bcrypt.hash(password, 10);

    const userData = {
      email,
      username: (username && username.trim()) ? username.trim() : null, // X·ª≠ l√Ω empty string v√† spaces
      password: hashed,
      role: role || 'user',
      full_name,
      phone,
      approved: true, // T·ª± ƒë·ªông approve user ƒë∆∞·ª£c t·∫°o b·ªüi admin
    };

    // Ch·ªâ th√™m branch info n·∫øu kh√¥ng ph·∫£i admin
    if (role !== 'admin') {
      userData.branch_id = branch_id;
      userData.branch_name = branch_name;
    }

    console.log('üîß [REGISTER] Creating user with data:', userData);
    await User.create(userData);
    console.log('‚úÖ [REGISTER] User created successfully');

    res.status(201).json({ message: '‚úÖ T·∫°o t√†i kho·∫£n th√†nh c√¥ng' });
  } catch (err) {
    console.error('‚ùå [REGISTER] Error creating user:', err);
    res.status(500).json({ message: '‚ùå L·ªói server', error: err.message });
  }
});

// ===== ƒêƒÉng nh·∫≠p user =====
router.post('/login', async (req, res) => {
  try {
    const { email, password } = req.body; // email c√≥ th·ªÉ l√† email ho·∫∑c username

    if (!email || !password) {
      return res.status(400).json({ message: '‚ùå Email/Username v√† m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc' });
    }

    // T√¨m user b·∫±ng email ho·∫∑c username
    const user = await User.findOne({
      $or: [
        { email: email.toLowerCase() },
        { username: email } // S·ª≠ d·ª•ng field email ƒë·ªÉ nh·∫≠n c·∫£ username
      ]
    });
    
    if (!user) {
      return res.status(400).json({ message: '‚ùå Email/Username kh√¥ng t·ªìn t·∫°i' });
    }

    const match = await bcrypt.compare(password, user.password);
    if (!match) {
      return res.status(400).json({ message: '‚ùå M·∫≠t kh·∫©u sai' });
    }

    const token = jwt.sign(
      {
        id: user._id,
        email: user.email,
        role: user.role,
        branch_id: user.branch_id,
        branch_name: user.branch_name,
        full_name: user.full_name,
      },
      process.env.JWT_SECRET || 'vphone_secret_key',
      { expiresIn: '7d' }
    );

    res.status(200).json({ message: '‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng', token });
  } catch (err) {
    console.error('‚ùå [LOGIN] Error:', err && err.stack ? err.stack : err);
    res.status(500).json({ message: '‚ùå L·ªói server', error: err && err.message ? err.message : String(err) });
  }
});

// ==== Qu√™n m·∫≠t kh·∫©u (G·ª≠i OTP, x√°c th·ª±c OTP ƒë·ªÉ ƒë·ªïi m·∫≠t kh·∫©u) ====
// OTP l∆∞u t·∫°m ·ªü RAM, production th√¨ n√™n d√πng Redis/DB
const otpStore = {};

// T·∫°o OTP 6 s·ªë
function generateOTP(length = 6) {
  return Math.floor(100000 + Math.random() * 900000).toString().slice(0, length);
}

// G·ª≠i OTP qua email (c·∫ßn c·∫•u h√¨nh SMTP)
async function sendOTP(email, otp) {
  const transporter = nodemailer.createTransport({
    service: 'Gmail',
    auth: {
      user: process.env.EMAIL_USER,   // t√†i kho·∫£n Gmail/app password
      pass: process.env.EMAIL_PASS,
    },
  });

  await transporter.sendMail({
    from: '"VPhone App" <no-reply@vphone.vn>',
    to: email,
    subject: 'M√£ x√°c th·ª±c ƒë·ªïi m·∫≠t kh·∫©u',
    html: `<p>M√£ x√°c th·ª±c OTP ƒë·ªïi m·∫≠t kh·∫©u l√†: <b>${otp}</b><br>M√£ c√≥ hi·ªáu l·ª±c trong 10 ph√∫t.</p>`,
  });
}

// B1: G·ª≠i OTP v·ªÅ email (c√πng v·ªõi m·∫≠t kh·∫©u m·ªõi)
router.post('/send-reset-otp', async (req, res) => {
  try {
    const { email, password } = req.body;
    if (!email || !password) return res.status(400).json({ message: 'Thi·∫øu email ho·∫∑c m·∫≠t kh·∫©u m·ªõi!' });

    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: 'Email kh√¥ng t·ªìn t·∫°i!' });

    const otp = generateOTP(6);
    otpStore[email] = {
      otp,
      password,  // L∆∞u plain password t·∫°m th·ªùi
      expire: Date.now() + 10 * 60 * 1000, // 10 ph√∫t
    };

    await sendOTP(email, otp);
    res.json({ message: 'ƒê√£ g·ª≠i m√£ x√°c th·ª±c v·ªÅ email.' });
  } catch (err) {
    console.error('L·ªói g·ª≠i OTP:', err);
    res.status(500).json({ message: 'Kh√¥ng g·ª≠i ƒë∆∞·ª£c email!', error: err.message });
  }
});

// B2: X√°c th·ª±c OTP v√† ƒë·ªïi m·∫≠t kh·∫©u
router.post('/verify-reset-otp', async (req, res) => {
  try {
    const { email, otp } = req.body;
    if (!email || !otp) return res.status(400).json({ message: 'Thi·∫øu email ho·∫∑c OTP!' });

    const entry = otpStore[email];
    if (!entry) return res.status(400).json({ message: 'B·∫°n ch∆∞a g·ª≠i y√™u c·∫ßu qu√™n m·∫≠t kh·∫©u.' });
    if (entry.otp !== otp) return res.status(400).json({ message: 'Sai m√£ x√°c th·ª±c OTP!' });
    if (Date.now() > entry.expire) {
      delete otpStore[email];
      return res.status(400).json({ message: 'M√£ x√°c th·ª±c ƒë√£ h·∫øt h·∫°n. Vui l√≤ng g·ª≠i l·∫°i!' });
    }

    const hashed = await bcrypt.hash(entry.password, 10);
    await User.updateOne({ email }, { password: hashed });

    delete otpStore[email];
    res.json({ message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!' });
  } catch (err) {
    console.error('L·ªói x√°c th·ª±c OTP:', err);
    res.status(500).json({ message: 'L·ªói x√°c th·ª±c OTP', error: err.message });
  }
});

module.exports = router;
