const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
require('dotenv').config();

const Inventory = require('./models/Inventory');
const Cashbook = require('./models/Cashbook'); // TH√äM D√íNG N√ÄY
const ExportHistory = require('./models/ExportHistory'); // TH√äM MODEL EXPORT HISTORY
const ReturnImport = require('./models/ReturnImport'); // TH√äM MODEL RETURN IMPORT
const ReturnExport = require('./models/ReturnExport'); // TH√äM MODEL RETURN EXPORT
const User = require('./models/User'); // TH√äM MODEL USER
const Branch = require('./models/Branch'); // TH√äM MODEL BRANCH
const authRoutes = require('./routes/auth');
const userRoutes = require('./routes/user');
const reportRoutes = require('./routes/report');
const reportBatchRoutes = require('./routes/reportBatch');
const branchRoutes = require('./routes/branch');
const categoryRoutes = require('./routes/category');
const congNoRoutes = require('./routes/congno');
const adminRoutes = require('./routes/admin');
const cashbookRoutes = require('./routes/cashbook'); // TH√äM D√íNG N√ÄY
const returnImportRoutes = require('./routes/returnImport');
const returnExportRoutes = require('./routes/returnExport');
const activityLogRoutes = require('./routes/activityLogs');

const app = express();

// CORS configuration - cho ph√©p t·∫•t c·∫£ origins ƒë·ªÉ d·ªÖ tri·ªÉn khai
app.use(cors({
  origin: function(origin, callback) {
    // Cho ph√©p t·∫•t c·∫£ origins ƒë·ªÉ d·ªÖ tri·ªÉn khai cho nhi·ªÅu ng∆∞·ªùi
    console.log('‚úÖ CORS allowing origin:', origin || 'no-origin');
    return callback(null, true);
  },
  credentials: true,
}));

app.options('*', cors());
app.use(express.json());

// ==== ƒêƒÉng k√Ω c√°c route API ====
console.log('üîß [SERVER] ƒêang ƒëƒÉng k√Ω routes...');
app.use('/api', adminRoutes);
// Mount b√°o c√°o d∆∞·ªõi /api/report ƒë·ªÉ tr√°nh middleware b√°o c√°o ch·∫∑n to√†n b·ªô /api
app.use('/api/report', reportRoutes);
app.use('/api', reportBatchRoutes);
app.use('/api/auth', authRoutes);
app.use('/api/user', userRoutes);
app.use('/api/branches', branchRoutes);
app.use('/api/categories', categoryRoutes);
app.use('/api/cong-no', congNoRoutes);
app.use('/api/cashbook', cashbookRoutes); // ROUTE S·ªî QU·ª∏
app.use('/api/activity-logs', activityLogRoutes);
console.log('üîß [SERVER] ƒêang ƒëƒÉng k√Ω return routes...');
app.use('/api/return-import', returnImportRoutes);
app.use('/api/return-export', returnExportRoutes);
console.log('‚úÖ [SERVER] ƒê√£ ƒëƒÉng k√Ω t·∫•t c·∫£ routes');

// ==================== API: SUPER DEBUG BACKEND ====================
app.get('/api/super-debug/:id', async (req, res) => {
  try {
    const id = req.params.id;
    console.log('üîç BACKEND SUPER DEBUG for ID:', id);
    
    // Test trong Inventory
    const inventoryItem = await Inventory.findById(id);
    console.log('üì¶ Backend Inventory result:', inventoryItem ? {
      _id: inventoryItem._id,
      product_name: inventoryItem.product_name,
      status: inventoryItem.status,
      price_sell: inventoryItem.price_sell,
      giaBan: inventoryItem.giaBan
    } : 'NOT FOUND');
    
    // Test trong ExportHistory  
    let exportItem = null;
    try {
      exportItem = await ExportHistory.findById(id);
      console.log('üìã Backend ExportHistory result:', exportItem ? {
        _id: exportItem._id,
        product_name: exportItem.product_name,
        price_sell: exportItem.price_sell
      } : 'NOT FOUND');
    } catch (err) {
      console.log('üìã ExportHistory model error:', err.message);
    }
    
    // ƒê·∫øm records
    const inventoryCount = await Inventory.countDocuments();
    const soldCount = await Inventory.countDocuments({ status: 'sold' });
    
    res.status(200).json({
      message: 'üîç BACKEND SUPER DEBUG RESULTS',
      test_id: id,
      inventory_item: inventoryItem ? {
        found: true,
        _id: inventoryItem._id,
        product_name: inventoryItem.product_name,
        status: inventoryItem.status,
        price_sell: inventoryItem.price_sell,
        giaBan: inventoryItem.giaBan
      } : { found: false },
      export_history_item: exportItem ? {
        found: true,
        _id: exportItem._id,
        product_name: exportItem.product_name,
        price_sell: exportItem.price_sell
      } : { found: false },
      collections_stats: {
        total_inventory: inventoryCount,
        inventory_sold: soldCount
      }
    });
  } catch (error) {
    console.error('‚ùå Backend super debug error:', error);
    res.status(500).json({ message: '‚ùå Backend super debug failed', error: error.message });
  }
});

// ==================== API: SIMPLE UPDATE TEST ====================
app.put('/api/test-update/:id', async (req, res) => {
  try {
    console.log('üß™ SIMPLE UPDATE TEST for ID:', req.params.id);
    console.log('üß™ Request body:', req.body);
    
    // ƒê∆°n gi·∫£n: ch·ªâ update 1 field
    const updated = await Inventory.findByIdAndUpdate(
      req.params.id,
      { $set: { note: 'TEST UPDATE WORKED', updatedAt: new Date() } },
      { new: true }
    );
    
    if (!updated) {
      return res.status(404).json({ message: '‚ùå Test update failed - record not found' });
    }
    
    res.status(200).json({
      message: '‚úÖ TEST UPDATE SUCCESS!',
      updated_fields: {
        _id: updated._id,
        note: updated.note,
        product_name: updated.product_name,
        status: updated.status
      }
    });
  } catch (error) {
    console.error('‚ùå Test update error:', error);
    res.status(500).json({ message: '‚ùå Test update failed', error: error.message });
  }
});

// API l·∫•y danh s√°ch nh·∫≠p h√†ng
app.get('/api/nhap-hang', async (req, res) => {
  try {
    const items = await Inventory.find().sort({ import_date: -1, _id: -1 });
    res.status(200).json({ items });
  } catch (error) {
    console.error('‚ùå L·ªói khi l·∫•y danh s√°ch nh·∫≠p h√†ng:', error.message);
    res.status(500).json({ message: '‚ùå L·ªói server khi l·∫•y danh s√°ch', error: error.message });
  }
});

// API nh·∫≠p h√†ng (t√≠ch h·ª£p ghi s·ªï qu·ªπ)
app.post('/api/nhap-hang', async (req, res) => {
  try {
    const {
      imei,
      sku,
      price_import,
      product_name,
      import_date,
      supplier,
      branch,
      note,
      quantity,
      category,
      source, // Ngu·ªìn ti·ªÅn: Ti·ªÅn m·∫∑t/Th·∫ª/C√¥ng n·ª£ (t·ª´ frontend)
      da_thanh_toan_nhap, // S·ªë ti·ªÅn ƒë√£ thanh to√°n cho nh√† cung c·∫•p
      payments // [{source, amount}] n·∫øu ƒëa ngu·ªìn
    } = req.body;

    if (imei) {
      const exists = await Inventory.findOne({ imei });
      if (exists) {
        return res.status(400).json({ message: '‚ùå IMEI n√†y ƒë√£ t·ªìn t·∫°i trong kho.' });
      }
      // T√≠nh to√°n ƒë√£ thanh to√°n
      const priceImportNum = Number(price_import) || 0;
      const daTTNhapNum = Number(da_thanh_toan_nhap) || priceImportNum; // T·ª± ƒë·ªông t√≠nh = gi√° nh·∫≠p n·∫øu kh√¥ng c√≥
      
      const newItem = new Inventory({
        imei,
        sku,
        price_import: priceImportNum,
        product_name,
        tenSanPham: product_name,
        import_date,
        supplier,
        branch,
        note,
        quantity: 1,
        category,
        da_thanh_toan_nhap: daTTNhapNum, // ƒê√£ thanh to√°n cho nh√† cung c·∫•p
      });
      await newItem.save();

      // --- Ghi S·ªî QU·ª∏: h·ªó tr·ª£ ƒëa ngu·ªìn ---
      const payList = Array.isArray(payments) && payments.length > 0
        ? payments
        : (daTTNhapNum > 0 ? [{ source: source || 'tien_mat', amount: daTTNhapNum }] : []);
      for (const p of payList) {
        if (!p || !p.amount) continue;
        await Cashbook.create({
          type: 'chi',
          amount: Number(p.amount),
          content: `Nh·∫≠p h√†ng: ${product_name} (IMEI: ${imei})`,
          note: note || '',
          date: import_date || new Date(),
          branch,
          source: p.source || 'tien_mat',
          supplier: supplier || '',
          related_id: newItem._id,
        });
      }

      return res.status(201).json({
        message: '‚úÖ Nh·∫≠p h√†ng th√†nh c√¥ng!',
        item: newItem,
      });
    }

    if (!sku || !product_name) {
      return res.status(400).json({ message: '‚ùå Thi·∫øu SKU ho·∫∑c t√™n s·∫£n ph·∫©m.' });
    }

    // ‚úÖ S·ª≠a: T√¨m s·∫£n ph·∫©m c√πng lo·∫°i ƒë·ªÉ g·ªôp (kh√¥ng ph√¢n bi·ªát gi√° nh·∫≠p v√† ng√†y th√°ng)
    let existItem = await Inventory.findOne({
      $or: [{ imei: null }, { imei: "" }, { imei: undefined }],
      sku: sku,
      branch: branch,
      product_name: product_name,
      category: category,
      // B·ªè ƒëi·ªÅu ki·ªán price_import ƒë·ªÉ g·ªôp c√πng s·∫£n ph·∫©m d√π kh√°c gi√° nh·∫≠p
    });

    if (existItem) {
      // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
      const quantityNum = Number(quantity || 1);
      const priceImportNum = Number(price_import) || 0;
      const daTTNhapNum = Number(da_thanh_toan_nhap) || (priceImportNum * quantityNum); // T·ª± ƒë·ªông t√≠nh n·∫øu kh√¥ng c√≥
      
      existItem.quantity = (existItem.quantity || 1) + quantityNum;
      existItem.import_date = import_date || existItem.import_date;
      existItem.supplier = supplier || existItem.supplier;
      existItem.note = note || existItem.note;
      existItem.da_thanh_toan_nhap = (existItem.da_thanh_toan_nhap || 0) + daTTNhapNum;
      await existItem.save();
      return res.status(200).json({
        message: '‚úÖ ƒê√£ c·ªông d·ªìn s·ªë l∆∞·ª£ng ph·ª• ki·ªán!',
        item: existItem,
      });
    } else {
      // T√≠nh to√°n cho ph·ª• ki·ªán m·ªõi
      const quantityNum = Number(quantity || 1);
      const priceImportNum = Number(price_import) || 0;
      const daTTNhapNum = Number(da_thanh_toan_nhap) || (priceImportNum * quantityNum); // T·ª± ƒë·ªông t√≠nh n·∫øu kh√¥ng c√≥
      
      const newItem = new Inventory({
        sku,
        price_import: priceImportNum,
        product_name,
        tenSanPham: product_name,
        import_date,
        supplier,
        branch,
        note,
        quantity: quantityNum,
        category,
        da_thanh_toan_nhap: daTTNhapNum, // ƒê√£ thanh to√°n cho nh√† cung c·∫•p
      });
      await newItem.save();

      // --- Ghi S·ªî QU·ª∏: h·ªó tr·ª£ ƒëa ngu·ªìn ---
      const payList2 = Array.isArray(payments) && payments.length > 0
        ? payments
        : (daTTNhapNum > 0 ? [{ source: source || 'tien_mat', amount: daTTNhapNum }] : []);
      for (const p of payList2) {
        if (!p || !p.amount) continue;
        await Cashbook.create({
          type: 'chi',
          amount: Number(p.amount),
          content: `Nh·∫≠p ph·ª• ki·ªán: ${product_name}`,
          note: note || '',
          date: import_date || new Date(),
          branch,
          source: p.source || 'tien_mat',
          supplier: supplier || '',
          related_id: newItem._id,
        });
      }

      return res.status(201).json({
        message: '‚úÖ Nh·∫≠p ph·ª• ki·ªán th√†nh c√¥ng!',
        item: newItem,
      });
    }
  } catch (error) {
    console.error('‚ùå L·ªói khi nh·∫≠p h√†ng:', error.message);
    res.status(500).json({ message: '‚ùå L·ªói server khi nh·∫≠p h√†ng', error: error.message });
  }
});

// API s·ª≠a h√†ng
app.put('/api/nhap-hang/:id', async (req, res) => {
  try {
    // ‚úÖ FIX: L·∫•y record hi·ªán t·∫°i tr∆∞·ªõc khi c·∫≠p nh·∫≠t
    const existingItem = await Inventory.findById(req.params.id);
    if (!existingItem) {
      return res.status(404).json({ message: '‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ƒë·ªÉ c·∫≠p nh·∫≠t.' });
    }

    // ‚úÖ FIX: T·∫°o updateData v√† b·∫£o v·ªá price_import kh·ªèi b·ªã thay ƒë·ªïi
    const updateData = { ...req.body };
    
    // ‚úÖ B·∫£o v·ªá price_import - ch·ªâ cho ph√©p c·∫≠p nh·∫≠t n·∫øu c√≥ gi√° tr·ªã v√† kh√°c 0
    if (updateData.price_import !== undefined) {
      const newPriceImport = Number(updateData.price_import) || 0;
      if (newPriceImport <= 0) {
        // N·∫øu gi√° tr·ªã m·ªõi <= 0, gi·ªØ nguy√™n gi√° tr·ªã c≈©
        updateData.price_import = existingItem.price_import;
      }
    }

    console.log('üîÑ Updating inventory item:', {
      id: req.params.id,
      oldPriceImport: existingItem.price_import,
      newPriceImport: updateData.price_import,
      note: 'B·∫£o v·ªá price_import kh·ªèi b·ªã thay ƒë·ªïi kh√¥ng mong mu·ªën'
    });

    const updatedItem = await Inventory.findByIdAndUpdate(
      req.params.id,
      updateData,
      { new: true },
    );

    res.status(200).json({
      message: '‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!',
      item: updatedItem,
    });
  } catch (error) {
    console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m:', error.message);
    res.status(500).json({ message: '‚ùå L·ªói server khi c·∫≠p nh·∫≠t', error: error.message });
  }
});

// API xo√° h√†ng
app.delete('/api/nhap-hang/:id', async (req, res) => {
  try {
    const deletedItem = await Inventory.findByIdAndDelete(req.params.id);

    if (!deletedItem) {
      return res.status(404).json({ message: '‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ƒë·ªÉ xo√°.' });
    }

    res.status(200).json({
      message: '‚úÖ ƒê√£ xo√° th√†nh c√¥ng!',
      item: deletedItem,
    });
  } catch (error) {
    console.error('‚ùå L·ªói khi xo√° s·∫£n ph·∫©m:', error.message);
    res.status(500).json({ message: '‚ùå L·ªói server khi xo√° s·∫£n ph·∫©m', error: error.message });
  }
});

// API xu·∫•t h√†ng (t√≠ch h·ª£p ghi s·ªï qu·ªπ)
app.post('/api/xuat-hang', async (req, res) => {
  try {
    const {
      imei,
      price_sell,
      customer_name,
      customer_phone,
      warranty,
      note,
      sku,
      product_name,
      sold_date,
      // debt, // ‚úÖ REMOVED: Kh√¥ng d√πng field debt n·ªØa
      da_thanh_toan, // S·ªë ti·ªÅn ƒë√£ thanh to√°n
      branch,
      source, // Ngu·ªìn ti·ªÅn (frontend truy·ªÅn l√™n)
      is_accessory,
      quantity // S·ªë l∆∞·ª£ng (cho ph·ª• ki·ªán)
    } = req.body;

    console.log('üîç POST /api/xuat-hang received da_thanh_toan:', da_thanh_toan);
    console.log('üîç POST da_thanh_toan type:', typeof da_thanh_toan);
    console.log('üîç POST full request body:', req.body);

    let item;
    
    // ‚úÖ X·ª≠ l√Ω ph·ª• ki·ªán v√† s·∫£n ph·∫©m c√≥ IMEI kh√°c nhau
    if (is_accessory || !imei) {
      // Ph·ª• ki·ªán: t√¨m theo SKU v√† product_name, status in_stock
      const query = {
        status: 'in_stock',
        $or: [
          { sku: sku },
          { product_name: product_name },
          { tenSanPham: product_name }
        ]
      };
      
      const availableItems = await Inventory.find(query);
      
      if (availableItems.length === 0) {
        return res.status(404).json({ message: '‚ùå Kh√¥ng t√¨m th·∫•y ph·ª• ki·ªán trong kho.' });
      }
      
      // L·∫•y item ƒë·∫ßu ti√™n c√≥ s·ªë l∆∞·ª£ng > 0
      item = availableItems.find(i => (i.quantity || 0) > 0) || availableItems[0];
      
      if (!item) {
        return res.status(404).json({ message: '‚ùå Ph·ª• ki·ªán ƒë√£ h·∫øt h√†ng.' });
      }
      
      // ‚úÖ Ki·ªÉm tra s·ªë l∆∞·ª£ng tr·ª±c ti·∫øp t·ª´ Inventory (logic ƒë∆°n gi·∫£n)
      const sellQuantity = parseInt(quantity) || 1;
      const currentQuantity = item.quantity || 0;
      
      if (currentQuantity < sellQuantity) {
        return res.status(400).json({ 
          message: `‚ùå Kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng. C√≤n l·∫°i: ${currentQuantity}, y√™u c·∫ßu: ${sellQuantity}` 
        });
      }
      
    } else {
      // S·∫£n ph·∫©m c√≥ IMEI: t√¨m theo IMEI
      item = await Inventory.findOne({ imei });
      if (!item) {
        return res.status(404).json({ message: '‚ùå Kh√¥ng t√¨m th·∫•y IMEI trong kho.' });
      }

      if (item.status === 'sold') {
        return res.status(400).json({ message: '‚ö†Ô∏è M√°y n√†y ƒë√£ ƒë∆∞·ª£c b√°n tr∆∞·ªõc ƒë√≥.' });
      }
    }

    // ‚úÖ X·ª≠ l√Ω kh√°c nhau cho ph·ª• ki·ªán v√† s·∫£n ph·∫©m IMEI
    if (is_accessory || !imei) {
      // ‚úÖ PH·ª§ KI·ªÜN: TR·ª™ tr·ª±c ti·∫øp quantity trong Inventory (logic ƒë∆°n gi·∫£n)
      const sellQuantity = parseInt(quantity) || 1;
      
      // ‚úÖ Tr·ª´ tr·ª±c ti·∫øp quantity trong Inventory
      item.quantity = (item.quantity || 0) - sellQuantity;
      
      // N·∫øu h·∫øt h√†ng th√¨ chuy·ªÉn status
      if (item.quantity <= 0) {
        item.status = 'sold';
        item.quantity = 0;
      }
      
      // ‚úÖ Ghi v√†o ExportHistory thay v√¨ Inventory
      const priceSellNum = Number(price_sell) || 0;
      // ‚úÖ FIX: Kh√¥ng t·ª± ƒë·ªông t√≠nh da_thanh_toan khi b√°n h√†ng, l∆∞u ƒë√∫ng gi√° tr·ªã ng∆∞·ªùi d√πng nh·∫≠p
      let daTTNum = parseFloat(da_thanh_toan) || 0; // L∆∞u gi√° tr·ªã ng∆∞·ªùi d√πng nh·∫≠p (k·ªÉ c·∫£ 0)
      
      console.log('üîß Creating ExportHistory for accessory with quantity:', sellQuantity); // ‚úÖ Debug log
      console.log('üîç POST Accessory da_thanh_toan - FIXED:', {
        input_da_thanh_toan: da_thanh_toan,
        final_daTTNum: daTTNum,
        priceSellNum,
        sellQuantity,
        note: 'Kh√¥ng t·ª± ƒë·ªông t√≠nh, l∆∞u ƒë√∫ng gi√° tr·ªã ng∆∞·ªùi d√πng nh·∫≠p'
      });
      
      const soldAccessory = new ExportHistory({
        imei: '', // Ph·ª• ki·ªán kh√¥ng c√≥ IMEI
        sku: item.sku,
        product_name: item.product_name,
        category: item.category,
        price_import: item.price_import,
        price_sell: priceSellNum, // ‚úÖ Ch·ªâ d√πng field c√≥ trong schema
        da_thanh_toan: daTTNum, // ‚úÖ Field n√†y c√≥ trong schema
        sold_date: sold_date ? new Date(sold_date) : new Date(),
        customer_name: customer_name || '',
        customer_phone: customer_phone || '',
        warranty: warranty || '',
        note: note || '',
        branch: branch || item.branch,
        quantity: sellQuantity, // ‚úÖ Field n√†y c√≥ trong schema
        export_type: 'accessory' // ‚úÖ ƒê√°nh d·∫•u l√† ph·ª• ki·ªán
      });
      
      console.log('‚úÖ ExportHistory record to be saved:', {
        sku: soldAccessory.sku,
        product_name: soldAccessory.product_name,
        quantity: soldAccessory.quantity,
        price_sell: soldAccessory.price_sell,
        da_thanh_toan: soldAccessory.da_thanh_toan
      }); // ‚úÖ Debug log
      
      await soldAccessory.save();
      // ‚úÖ Save item v√¨ ƒë√£ thay ƒë·ªïi quantity
      await item.save();
      
      // ‚úÖ DEBUG: Ki·ªÉm tra record sau khi l∆∞u
      const savedRecord = await ExportHistory.findById(soldAccessory._id);
      console.log('üîç SAVED ACCESSORY RECORD:', {
        _id: savedRecord._id,
        da_thanh_toan: savedRecord.da_thanh_toan,
        quantity: savedRecord.quantity,
        price_sell: savedRecord.price_sell
      });
      
      // ƒê·∫∑t item th√†nh soldAccessory ƒë·ªÉ ghi s·ªï qu·ªπ
      item = soldAccessory;
      
    } else {
      // ‚úÖ S·∫£n ph·∫©m IMEI: T·∫°o record m·ªõi trong ExportHistory + c·∫≠p nh·∫≠t Inventory
      
      // 1. C·∫≠p nh·∫≠t Inventory (chuy·ªÉn status sang sold)
      item.status = 'sold';
      item.sold_date = sold_date ? new Date(sold_date) : new Date();
      await item.save();
      
      // 2. T·∫°o record m·ªõi trong ExportHistory
      const priceSellNum = Number(price_sell) || 0;
      // ‚úÖ FIX: Kh√¥ng t·ª± ƒë·ªông t√≠nh da_thanh_toan khi b√°n h√†ng, l∆∞u ƒë√∫ng gi√° tr·ªã ng∆∞·ªùi d√πng nh·∫≠p
      let daTTNum = parseFloat(da_thanh_toan) || 0; // L∆∞u gi√° tr·ªã ng∆∞·ªùi d√πng nh·∫≠p (k·ªÉ c·∫£ 0)
      
      console.log('üîß Creating ExportHistory for IMEI product with quantity: 1'); // ‚úÖ Debug log
      console.log('üîç POST IMEI da_thanh_toan - FIXED:', {
        input_da_thanh_toan: da_thanh_toan,
        final_daTTNum: daTTNum,
        priceSellNum,
        note: 'Kh√¥ng t·ª± ƒë·ªông t√≠nh, l∆∞u ƒë√∫ng gi√° tr·ªã ng∆∞·ªùi d√πng nh·∫≠p'
      });
      
      const soldItem = new ExportHistory({
        imei: item.imei,
        sku: sku || item.sku,
        product_name: product_name || item.product_name,
        category: item.category,
        price_import: item.price_import,
        price_sell: priceSellNum,
        da_thanh_toan: daTTNum, // ‚úÖ Field n√†y c√≥ trong schema
        sold_date: sold_date ? new Date(sold_date) : new Date(),
        customer_name: customer_name || '',
        customer_phone: customer_phone || '',
        warranty: warranty || '',
        note: note || '',
        branch: branch || item.branch,
        export_type: 'normal', // ‚úÖ Field n√†y c√≥ trong schema
        quantity: 1 // ‚úÖ S·∫£n ph·∫©m IMEI lu√¥n l√† 1
      });
      
      console.log('‚úÖ ExportHistory IMEI record to be saved:', {
        imei: soldItem.imei,
        sku: soldItem.sku,
        product_name: soldItem.product_name,
        quantity: soldItem.quantity,
        price_sell: soldItem.price_sell,
        da_thanh_toan: soldItem.da_thanh_toan
      }); // ‚úÖ Debug log
      
      await soldItem.save();
      
      // ‚úÖ DEBUG: Ki·ªÉm tra record sau khi l∆∞u
      const savedIMEIRecord = await ExportHistory.findById(soldItem._id);
      console.log('üîç SAVED IMEI RECORD:', {
        _id: savedIMEIRecord._id,
        da_thanh_toan: savedIMEIRecord.da_thanh_toan,
        quantity: savedIMEIRecord.quantity,
        price_sell: savedIMEIRecord.price_sell,
        imei: savedIMEIRecord.imei
      });
      
      // C·∫≠p nh·∫≠t item ƒë·ªÉ s·ª≠ d·ª•ng cho ph·∫ßn ghi s·ªï qu·ªπ ph√≠a d∆∞·ªõi
      item = soldItem;
    }

    const profit = (item.giaBan || 0) - (item.price_import || 0);

    // --- Ghi S·ªî QU·ª∏: THU TI·ªÄN ---
    const productDescription = item.imei 
      ? `${item.product_name} (IMEI: ${item.imei})`
      : `${item.product_name} (Ph·ª• ki·ªán - SL: ${item.quantity || 1})`;
      
    // Ghi s·ªï qu·ªπ v·ªõi s·ªë ti·ªÅn ƒë√£ thanh to√°n th·ª±c t·∫ø
    const amountReceived = Number(item.da_thanh_toan || da_thanh_toan || 0);
    if (amountReceived > 0) {
      await Cashbook.create({
        type: 'thu',
        amount: amountReceived,
        content: `B√°n h√†ng: ${productDescription}`,
        note: note || '',
        date: sold_date || new Date(),
        branch: branch || '',
        source: source || 'Ti·ªÅn m·∫∑t',
        customer: customer_name || '',
        related_id: item._id
      });
    }

    // ‚úÖ REMOVED: Kh√¥ng d√πng field debt n·ªØa, t√≠nh c√¥ng n·ª£ = (gi√° b√°n √ó s·ªë l∆∞·ª£ng) - ƒë√£ thanh to√°n
    // N·∫øu c√≥ c√¥ng n·ª£ th√¨ ghi s·ªï c√¥ng n·ª£ kh√°ch
    const sellQuantity = parseInt(quantity) || 1;
    const congNo = Math.max(((item.price_sell || 0) * sellQuantity) - (item.da_thanh_toan || 0), 0);
    if (congNo > 0) {
      await Cashbook.create({
        type: 'thu',
        amount: congNo,
        content: `C√¥ng n·ª£ kh√°ch h√†ng khi b√°n: ${productDescription}`,
        note: `C√¥ng n·ª£ kh√°ch: ${customer_name}`,
        date: sold_date || new Date(),
        branch: branch || '',
        source: 'C√¥ng n·ª£',
        customer: customer_name || '',
        related_id: item._id
      });
    }

    res.status(200).json({ message: '‚úÖ Xu·∫•t h√†ng th√†nh c√¥ng!', item, profit });
  } catch (error) {
    console.error('‚ùå L·ªói khi xu·∫•t h√†ng:', error.message);
    res.status(500).json({ message: '‚ùå L·ªói server khi xu·∫•t h√†ng', error: error.message });
  }
});

// API c·∫£nh b√°o t·ªìn kho - ‚úÖ ADDED: T·∫°o API m·ªõi cho c·∫£nh b√°o t·ªìn kho
app.get('/api/canh-bao-ton-kho', async (req, res) => {
  try {
    // L·∫•y t·∫•t c·∫£ ph·ª• ki·ªán (IMEI null) v√† m√°y iPhone (c√≥ IMEI) c√≥ status in_stock
    const inventories = await Inventory.find({ status: 'in_stock' });

    // L·∫•y t·ªïng xu·∫•t theo t·ª´ng sku (ch·ªâ cho ph·ª• ki·ªán)
    const exportAgg = await ExportHistory.aggregate([
      { $match: { imei: { $in: [null, ""] } } }, // Ch·ªâ ph·ª• ki·ªán (kh√¥ng IMEI)
      { $group: { _id: "$sku", totalExported: { $sum: "$quantity" } } }
    ]);
    const exportMap = {};
    exportAgg.forEach(e => exportMap[e._id] = e.totalExported);

    // Gom ph·ª• ki·ªán th√†nh 1 d√≤ng duy nh·∫•t m·ªói SKU
    const accessoriesMap = {};
    
    for (const item of inventories) {
      if (!item.imei) {
        // Ph·ª• ki·ªán: gom theo SKU + t√™n + chi nh√°nh
        const key = (item.sku || '') + '|' + (item.product_name || item.tenSanPham || '') + '|' + (item.branch || '');
        if (!accessoriesMap[key]) {
          accessoriesMap[key] = {
            sku: item.sku || "",
            tenSanPham: item.product_name || item.tenSanPham || "",
            product_name: item.product_name || item.tenSanPham || "",
            branch: item.branch || "",
            quantity: 0, // T·ªïng s·ªë nh·∫≠p
            totalRemain: 0, // T·ªïng t·ªìn kho
          };
        }
        accessoriesMap[key].quantity += Number(item.quantity) || 1;
      }
    }
    
    // T√≠nh s·ªë l∆∞·ª£ng c√≤n l·∫°i cho ph·ª• ki·ªán = s·ªë nh·∫≠p - s·ªë xu·∫•t
    const lowStockItems = [];
    for (const key in accessoriesMap) {
      const acc = accessoriesMap[key];
      const totalExported = exportMap[acc.sku] || 0;
      acc.totalRemain = acc.quantity - totalExported;
      if (acc.totalRemain < 0) acc.totalRemain = 0;
      
      // Ch·ªâ l·∫•y c√°c s·∫£n ph·∫©m c√≥ t·ªìn kho <= 2 (c·∫£nh b√°o)
      if (acc.totalRemain <= 2) {
        lowStockItems.push(acc);
      }
    }

    res.status(200).json({
      message: '‚úÖ Danh s√°ch c·∫£nh b√°o t·ªìn kho',
      total: lowStockItems.length,
      items: lowStockItems,
    });
  } catch (error) {
    console.error('‚ùå L·ªói khi l·∫•y c·∫£nh b√°o t·ªìn kho:', error.message);
    res.status(500).json({ message: '‚ùå L·ªói server khi l·∫•y c·∫£nh b√°o t·ªìn kho', error: error.message });
  }
});

// API chi ti·∫øt IMEI
app.get('/api/imei-detail/:imei', async (req, res) => {
  try {
    const { imei } = req.params;
    const item = await Inventory.findOne({ imei });
    
    if (!item) {
      return res.status(404).json({ message: '‚ùå Kh√¥ng t√¨m th·∫•y IMEI n√†y' });
    }

    res.status(200).json({
      message: '‚úÖ Th√¥ng tin chi ti·∫øt IMEI',
      item
    });
  } catch (error) {
    console.error('‚ùå L·ªói khi l·∫•y chi ti·∫øt IMEI:', error.message);
    res.status(500).json({ message: '‚ùå L·ªói server khi l·∫•y chi ti·∫øt IMEI', error: error.message });
  }
});

// API t·ªìn kho (logic ƒë∆°n gi·∫£n)
app.get('/api/ton-kho', async (req, res) => {
  try {
    console.log('üîç API /api/ton-kho ƒë∆∞·ª£c g·ªçi (logic ƒë∆°n gi·∫£n)');
    
    // ‚úÖ Ch·ªâ l·∫•y t·ª´ Inventory, kh√¥ng c·∫ßn t√≠nh to√°n ph·ª©c t·∫°p
    const items = await Inventory.find({});
    
    // ‚úÖ Ph√¢n lo·∫°i s·∫£n ph·∫©m: iPhone (c√≥ IMEI) vs ph·ª• ki·ªán (kh√¥ng IMEI)
    const imeiItems = []; // M√°y c√≥ IMEI
    const accessoriesMap = {}; // Ph·ª• ki·ªán gom nh√≥m theo SKU
    
    for (const item of items) {
      if (item.imei) {
        // ‚úÖ S·∫£n ph·∫©m c√≥ IMEI: gi·ªØ nguy√™n t·ª´ng item ri√™ng bi·ªát
        imeiItems.push({
          _id: item._id,
          imei: item.imei,
          product_name: item.product_name || item.tenSanPham,
          tenSanPham: item.tenSanPham || item.product_name,
          sku: item.sku,
          price_import: item.price_import || 0,
          import_date: item.import_date,
          supplier: item.supplier,
          branch: item.branch,
          category: item.category,
          note: item.note,
          status: item.status || 'in_stock',
          quantity: 1 // iPhone lu√¥n l√† 1 c√°i
        });
      } else {
        // ‚úÖ Ph·ª• ki·ªán: gom nh√≥m theo SKU + branch + category
        const key = `${item.sku || 'unknown'}_${item.branch || ''}_${item.category || ''}`;
        if (!accessoriesMap[key]) {
          accessoriesMap[key] = {
            _id: item._id, // L·∫•y ID c·ªßa item ƒë·∫ßu ti√™n
            imei: null,
            product_name: item.product_name || item.tenSanPham,
            tenSanPham: item.tenSanPham || item.product_name,
            sku: item.sku,
            price_import: item.price_import || 0,
            import_date: item.import_date,
            supplier: item.supplier,
            branch: item.branch,
            category: item.category,
            note: item.note,
            status: 'in_stock',
            quantity: 0 // T·ªïng s·ªë c√≤n l·∫°i
          };
        }
        // ‚úÖ Ch·ªâ c·ªông quantity n·∫øu status = 'in_stock'
        if (item.status !== 'sold') {
          accessoriesMap[key].quantity += Number(item.quantity) || 0;
        }
      }
    }
    
    // K·∫øt qu·∫£ tr·∫£ v·ªÅ: iPhone (IMEI ri√™ng) + ph·ª• ki·ªán (m·ªói lo·∫°i 1 d√≤ng)
    const accessoriesItems = Object.values(accessoriesMap);
    const allItems = [...imeiItems, ...accessoriesItems];

    res.status(200).json({
      message: '‚úÖ Danh s√°ch t·ªìn kho (logic ƒë∆°n gi·∫£n)',
      total: allItems.length,
      items: allItems,
      imeiItems, // M√°y c√≥ IMEI
      accessoriesItems, // Ph·ª• ki·ªán ƒë√£ gom nh√≥m
    });
  } catch (error) {
    console.error('‚ùå L·ªói khi l·∫•y t·ªìn kho:', error.message);
    res.status(500).json({ message: '‚ùå L·ªói server khi l·∫•y t·ªìn kho', error: error.message });
  }
});

// API c·∫£nh b√°o t·ªìn kho
app.get('/api/canh-bao-ton-kho', async (req, res) => {
  try {
    const items = await Inventory.find({ status: 'in_stock' });

    const grouped = {};
    items.forEach((item) => {
      const key = item.sku + (item.branch || '');
      if (!grouped[key]) {
        grouped[key] = {
          sku: item.sku || 'Kh√¥ng r√µ',
          tenSanPham: item.tenSanPham || item.product_name || 'Kh√¥ng r√µ',
          branch: item.branch || 'M·∫∑c ƒë·ªãnh',
          totalImport: 0,
          imeis: [],
        };
      }

      grouped[key].totalImport += 1;
      grouped[key].imeis.push(item.imei);
    });

    const result = Object.values(grouped)
      .map((g) => ({
        ...g,
        totalRemain: g.imeis.length,
      }))
      .filter((g) => g.totalRemain < 2);

    res.status(200).json({
      message: '‚úÖ Danh s√°ch h√†ng t·ªìn kho th·∫•p (d∆∞·ªõi 2)',
      total: result.length,
      items: result,
    });
  } catch (error) {
    console.error('‚ùå L·ªói khi l·∫•y danh s√°ch c·∫£nh b√°o t·ªìn kho:', error.message);
    res.status(500).json({ message: '‚ùå L·ªói server khi x·ª≠ l√Ω c·∫£nh b√°o t·ªìn kho', error: error.message });
  }
});

// API danh s√°ch xu·∫•t h√†ng  
app.get('/api/xuat-hang-list', async (req, res) => {
  try {
    // ‚úÖ L·∫•y t·ª´ ExportHistory thay v√¨ Inventory (v√¨ d·ªØ li·ªáu th·ª±c t·∫ø ·ªü ƒë√¢y)
    const rawItems = await ExportHistory.find({})
      .sort({ 
        sold_date: -1,      // ∆Øu ti√™n theo ng√†y b√°n (m·ªõi nh·∫•t tr∆∞·ªõc)
        export_date: -1,    // Ho·∫∑c export_date
        updated_at: -1,     // N·∫øu kh√¥ng c√≥ sold_date th√¨ theo updated_at  
        created_at: -1      // Cu·ªëi c√πng theo created_at
      });
    
    console.log(`‚úÖ Found ${rawItems.length} export records from ExportHistory (including accessories)`);
    
    // Debug: Log m·ªôt sample ƒë·ªÉ check field (ch·ªâ trong development)
    if (rawItems.length > 0 && process.env.NODE_ENV === 'development') {
      console.log('Sample export record fields:', {
        product_name: rawItems[0].product_name,
        imei: rawItems[0].imei || 'No IMEI (accessory)',
        quantity: rawItems[0].quantity, // ‚úÖ Debug quantity field
        sale_price: rawItems[0].sale_price,
        selling_price: rawItems[0].selling_price,
        customer_name: rawItems[0].customer_name,
        customer_phone: rawItems[0].customer_phone,
        sold_date: rawItems[0].sold_date || rawItems[0].export_date,
        all_keys: Object.keys(rawItems[0].toObject())
      });
    }
    
    // ‚úÖ FIX: Flexible field mapping ƒë·ªÉ support nhi·ªÅu field name kh√°c nhau  
    const items = rawItems.map(item => ({
      _id: item._id,
      sale_date: item.sold_date || item.createdAt,
      // ‚úÖ C·∫£i ti·∫øn mapping field gi√° b√°n - check nhi·ªÅu field
      sale_price: item.price_sell || item.giaBan || item.sale_price || 0,
      price_sell: item.price_sell || item.giaBan || 0, // Backup field
      buyer_name: item.customer_name || item.buyer_name || '',
      buyer_phone: item.customer_phone || item.buyer_phone || '',
      branch: item.branch || '',
      note: item.note || '',
      source: item.source || 'tien_mat',
      warranty: item.warranty || '',
      // ‚úÖ Th√™m c√°c field quan tr·ªçng kh√°c  
      price_import: item.price_import || item.giaNhap || 0,
      profit: (item.price_sell || item.giaBan || 0) - (item.price_import || item.giaNhap || 0),
      // ‚úÖ REMOVED: debt field - t√≠nh c√¥ng n·ª£ b·∫±ng price_sell - da_thanh_toan
      da_thanh_toan: item.da_thanh_toan || 0, // ‚úÖ TH√äM FIELD ƒê√É THANH TO√ÅN
      quantity: item.quantity || 1, // ‚úÖ TH√äM FIELD S·ªê L∆Ø·ª¢NG - QUAN TR·ªåNG!
      imei: item.imei || '',
      sku: item.sku || '',
      product_name: item.product_name || item.tenSanPham || '',
      customer_name: item.customer_name || '',
      customer_phone: item.customer_phone || '',
      item: {
        _id: item._id,
        product_name: item.product_name || item.tenSanPham,
        tenSanPham: item.tenSanPham || item.product_name,
        imei: item.imei || '',
        sku: item.sku || '',
        category: item.category || '',
      }
    }));
    
    res.status(200).json({ 
      message: '‚úÖ Danh s√°ch xu·∫•t h√†ng',
      total: items.length,
      items 
    });
  } catch (error) {
    console.error('‚ùå L·ªói API xuat-hang-list:', error);
    res.status(500).json({ message: '‚ùå L·ªói l·∫•y danh s√°ch xu·∫•t h√†ng', error: error.message });
  }
});

// API s·ª≠a xu·∫•t h√†ng - ƒê∆†N GI·∫¢N H√ìA THEO C√ÅCH NH·∫¨P H√ÄNG
app.put('/api/xuat-hang/:id', async (req, res) => {
  try {
    console.log('üîÑ PUT Request data:', req.body); // Debug
    console.log('üîç PUT Request ID:', req.params.id); // Debug
    console.log('üîç DEBUG da_thanh_toan in req.body:', req.body.da_thanh_toan); // Debug specific field

    // Ki·ªÉm tra record t·ªìn t·∫°i tr∆∞·ªõc khi c·∫≠p nh·∫≠t
    const existingRecord = await ExportHistory.findById(req.params.id);
    if (!existingRecord) {
      return res.status(404).json({ message: '‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n xu·∫•t ƒë·ªÉ c·∫≠p nh·∫≠t.' });
    }

    console.log('üìã Existing record before update:', {
      _id: existingRecord._id,
      da_thanh_toan: existingRecord.da_thanh_toan,
      quantity: existingRecord.quantity,
      customer_name: existingRecord.customer_name
    });

    // ‚úÖ X·ª≠ l√Ω da_thanh_toan: kh√¥ng t·ª± ƒë·ªông t√≠nh khi edit
    const updateData = { ...req.body };
    if (updateData.da_thanh_toan === undefined || updateData.da_thanh_toan === "") {
      updateData.da_thanh_toan = existingRecord.da_thanh_toan || 0; // Gi·ªØ nguy√™n gi√° tr·ªã c≈©
    } else {
      updateData.da_thanh_toan = parseFloat(updateData.da_thanh_toan) || 0;
    }

    // ‚úÖ ƒê·∫£m b·∫£o quantity ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    if (updateData.quantity) {
      updateData.quantity = parseInt(updateData.quantity) || 1;
    }
    
    const updatedItem = await ExportHistory.findByIdAndUpdate(
      req.params.id,
      updateData,
      { new: true }
    );

    console.log('‚úÖ Updated successfully:', {
      _id: updatedItem._id,
      da_thanh_toan: updatedItem.da_thanh_toan,
      quantity: updatedItem.quantity,
      price_sell: updatedItem.price_sell,
      customer_name: updatedItem.customer_name
    }); // Debug

    res.status(200).json({
      message: '‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!',
      item: updatedItem,
    });
  } catch (error) {
    console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t xu·∫•t h√†ng:', error.message);
    res.status(500).json({ message: '‚ùå L·ªói server khi c·∫≠p nh·∫≠t', error: error.message });
  }
});

app.delete('/api/xuat-hang/:id', async (req, res) => {
  try {
    // ‚úÖ X√≥a t·ª´ ExportHistory
    const exportRecord = await ExportHistory.findById(req.params.id);
    if (!exportRecord) {
      return res.status(404).json({ message: '‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n xu·∫•t h√†ng.' });
    }

    // N·∫øu c√≥ IMEI, kh√¥i ph·ª•c Inventory v·ªÅ in_stock
    if (exportRecord.imei) {
      const inventoryItem = await Inventory.findOne({ imei: exportRecord.imei });
      if (inventoryItem) {
        inventoryItem.status = 'in_stock';
        inventoryItem.sold_date = undefined;
        await inventoryItem.save();
      }
    }
    
    // ‚úÖ N·∫øu l√† ph·ª• ki·ªán, C·ªòNG l·∫°i s·ªë l∆∞·ª£ng trong Inventory (logic ƒë∆°n gi·∫£n)
    if (!exportRecord.imei && exportRecord.sku) {
      const inventoryItem = await Inventory.findOne({ 
        sku: exportRecord.sku, 
        status: { $in: ['in_stock', 'sold'] }
      });
      if (inventoryItem) {
        const returnQuantity = exportRecord.quantity || 1;
        inventoryItem.quantity = (inventoryItem.quantity || 0) + returnQuantity;
        inventoryItem.status = 'in_stock';
        await inventoryItem.save();
        console.log(`‚úÖ ƒê√£ c·ªông l·∫°i ${returnQuantity} v√†o inventory cho SKU: ${exportRecord.sku}`);
      }
    }

    // X√≥a record kh·ªèi ExportHistory
    await ExportHistory.findByIdAndDelete(req.params.id);

    res.status(200).json({ message: '‚úÖ ƒê√£ x√≥a ƒë∆°n xu·∫•t h√†ng v√† kh√¥i ph·ª•c t·ªìn kho!', item: exportRecord });
  } catch (error) {
    res.status(500).json({ message: '‚ùå L·ªói khi x√≥a ƒë∆°n xu·∫•t', error: error.message });
  }
});

// === API TR·∫¢ N·ª¢ NH√Ä CUNG C·∫§P (ghi chi v√†o s·ªï qu·ªπ) ===
app.post('/api/tra-no-ncc', async (req, res) => {
  try {
    const { supplier, amount, date, branch, source, note } = req.body;
    await Cashbook.create({
      type: 'chi',
      amount: Number(amount),
      content: `Tr·∫£ n·ª£ nh√† cung c·∫•p: ${supplier}`,
      note: note || '',
      date: date || new Date(),
      branch: branch || '',
      source: source || 'Ti·ªÅn m·∫∑t',
      supplier: supplier || ''
    });
    res.status(201).json({ message: '‚úÖ ƒê√£ ghi nh·∫≠n tr·∫£ n·ª£ nh√† cung c·∫•p!' });
  } catch (error) {
    res.status(500).json({ message: '‚ùå L·ªói khi ghi s·ªï tr·∫£ n·ª£', error: error.message });
  }
});

// === API THU N·ª¢ KH√ÅCH H√ÄNG (ghi thu v√†o s·ªï qu·ªπ) ===
app.post('/api/thu-no-khach', async (req, res) => {
  try {
    const { customer, amount, date, branch, source, note } = req.body;
    await Cashbook.create({
      type: 'thu',
      amount: Number(amount),
      content: `Thu n·ª£ kh√°ch: ${customer}`,
      note: note || '',
      date: date || new Date(),
      branch: branch || '',
      source: source || 'Ti·ªÅn m·∫∑t',
      customer: customer || ''
    });
    res.status(201).json({ message: '‚úÖ ƒê√£ ghi nh·∫≠n thu n·ª£ kh√°ch h√†ng!' });
  } catch (error) {
    res.status(500).json({ message: '‚ùå L·ªói khi ghi s·ªï thu n·ª£', error: error.message });
  }
});



mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/vphone')
.then(async () => {
  console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng');
  console.log('üîß [MONGODB] Checking models...');
  
  // Ki·ªÉm tra models c√≥ ho·∫°t ƒë·ªông kh√¥ng
  try {
    await ReturnImport.init();
    console.log('‚úÖ [MONGODB] ReturnImport model initialized');
  } catch (error) {
    console.error('‚ùå [MONGODB] ReturnImport model error:', error.message);
  }
  
  try {
    await ReturnExport.init();
    console.log('‚úÖ [MONGODB] ReturnExport model initialized');
  } catch (error) {
    console.error('‚ùå [MONGODB] ReturnExport model error:', error.message);
  }
  
  try {
    await User.init();
    console.log('‚úÖ [MONGODB] User model initialized');
  } catch (error) {
    console.error('‚ùå [MONGODB] User model error:', error.message);
  }
  
  try {
    await Branch.init();
    console.log('‚úÖ [MONGODB] Branch model initialized');
  } catch (error) {
    console.error('‚ùå [MONGODB] Branch model error:', error.message);
  }
  
  // T·ª± ƒë·ªông t·∫°o admin user n·∫øu ch∆∞a c√≥
  const { createDefaultAdmin } = require('./scripts/init-admin');
  await createDefaultAdmin();
})
.catch(err => console.error('‚ùå K·∫øt n·ªëi MongoDB l·ªói:', err));

app.get('/', (req, res) => {
  res.send('üéâ Backend ƒëang ch·∫°y!');
});

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.status(200).json({ 
    status: 'healthy', 
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

// Test endpoint for user creation
app.get('/api/test-user-creation', async (req, res) => {
  try {
    console.log('üîß [TEST] Testing user creation endpoint...');
    
    // Test User model
    const userCount = await User.countDocuments();
    console.log('‚úÖ [TEST] User count:', userCount);
    
    // Test Branch model
    const branchCount = await Branch.countDocuments();
    console.log('‚úÖ [TEST] Branch count:', branchCount);
    
    res.json({
      status: 'success',
      models: {
        User: { count: userCount, available: true },
        Branch: { count: branchCount, available: true }
      },
      endpoints: {
        register: '/api/auth/register',
        branches: '/api/branches'
      }
    });
  } catch (error) {
    console.error('‚ùå [TEST] User creation test error:', error);
    res.status(500).json({
      status: 'error',
      message: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// Test endpoint for return models
app.get('/api/test-return-models', async (req, res) => {
  try {
    console.log('üîß [TEST] Testing return models...');
    
    // Test ReturnImport model
    const returnImportCount = await ReturnImport.countDocuments();
    console.log('‚úÖ [TEST] ReturnImport count:', returnImportCount);
    
    // Test ReturnExport model
    const returnExportCount = await ReturnExport.countDocuments();
    console.log('‚úÖ [TEST] ReturnExport count:', returnExportCount);
    
    res.json({
      status: 'success',
      models: {
        ReturnImport: { count: returnImportCount, available: true },
        ReturnExport: { count: returnExportCount, available: true }
      }
    });
  } catch (error) {
    console.error('‚ùå [TEST] Return models error:', error);
    res.status(500).json({
      status: 'error',
      message: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

const PORT = process.env.PORT || 4000;
app.listen(PORT, () => {
  console.log(`üöÄ Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
});
